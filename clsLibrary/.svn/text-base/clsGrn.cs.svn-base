using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.Data.SqlClient;
using DbConnection;

namespace clsLibrary
{
    public class clsGrn
    {
        #region General Declaration
        private int intErrCode;
        private int intTempDocNo;
        private int intPackSize;

        private string strLocaCode;
        private string strLocaName;
        private string strSuppCode;
        private string strSuppName;
        private string strProductCode;
        private string strProductName;
        private string strSqlStatement;
        private string strTempDocumentNo;
        private string strDataSetName;
        private string strPostDate;
        private string strReference;
        private string strRemark;
        private string strOrgDocNo;
        private string strSavedDocNo;
        private string strRecallSaveDocNo;
        private string strDisc;
        private string strInvNo;
        private string strPoNo;
        private string strPay_Type;
        private string strUnit;

        private float fltQty;
        private float fltCurrentQty;
        private float fltFreeQty;
        private float fltTotalQty;

        private decimal decPurchasePrice;
        private decimal decSellingPrice;
        private decimal decDiscount;
        private decimal decGrossAmount;
        private decimal decAmount;
        private decimal decTotalAmount;
        private decimal decInvAmount;
        private decimal decTax;

        private DataSet dsItemDataSet;
        private DataSet dsSupplierDataSet;
        private DataSet dsTempGrn;
        private DataSet dsForReport;

        private Boolean blRecordFound;

        private SqlDataReader DataReader;
        #endregion

        #region Properties
        public string TempDocNo
        {
            get
            {
                return strTempDocumentNo;
            }
            set
            {
                strTempDocumentNo = value;
            }
        }

        public string SavedDocNo
        {
            get
            {
                return strSavedDocNo;
            }
            set
            {
                strSavedDocNo = value;
            }
        }

        public string RecallSaveDocNo
        {
            get
            {
                return strRecallSaveDocNo;
            }
            set
            {
                strRecallSaveDocNo = value;
            }
        }

        public string OrgDocNo
        {
            get
            {
                return strOrgDocNo;
            }
            set
            {
                strOrgDocNo = value;
            }
        }

        public int ErrorCode
        {
            get
            {
                return intErrCode;
            }
            set
            {
                intErrCode = value;
            }
        }

        public int PackSize
        {
            get
            {
                return intPackSize;
            }
            set
            {
                intPackSize = value;
            }
        }

        public string LocaCode
        {
            get
            {
                return strLocaCode;
            }
            set
            {
                strLocaCode = value;
            }
        }

        public string LocaName
        {
            get
            {
                return strLocaName;
            }
            set
            {
                strLocaName = value;
            }
        }

        public string SuppCode
        {
            get
            {
                return strSuppCode;
            }
            set
            {
                strSuppCode = value;
            }
        }

        public string SuppName
        {
            get
            {
                return strSuppName ;
            }
            set
            {
                strSuppName  = value;
            }
        }

        public string ProductCode
        {
            get
            {
                return strProductCode;
            }
            set
            {
                strProductCode = value;
            }
        }

        public string ProductName
        {
            get
            {
                return strProductName;
            }
            set
            {
                strProductName = value;
            }
        }

        public string Unit
        {
            get
            {
                return strUnit;
            }
            set
            {
                strUnit = value;
            }
        }

        public string Remark
        {
            get
            {
                return strRemark;
            }
            set
            {
                strRemark = value;
            }
        }

        public string Reference
        {
            get
            {
                return strReference;
            }
            set
            {
                strReference = value;
            }
        }

        public string PoNo
        {
            get
            {
                return strPoNo;
            }
            set
            {
                strPoNo=value;
            }
        }

        public string InvNo
        {
            get
            {
                return strInvNo;
            }
            set
            {
                strInvNo = value;
            }
        }

        public string Pay_Type
        {
            get
            {
                return strPay_Type;
            }
            set
            {
                strPay_Type = value;
            }
        }

        public string Disc
        {
            get
            {
                return strDisc;
            }
            set
            {
                strDisc = value;
            }
        }

        public float Qty
        {
            get
            {
                return fltQty;
            }
            set
            {
                fltQty = value;
            }
        }

        public float FreeQty
        {
            get
            {
                return fltFreeQty;
            }
            set
            {
                fltFreeQty = value;
            }
        }

        public float CurrentQty
        {
            get
            {
                return fltCurrentQty;
            }
            set
            {
                fltCurrentQty = value;
            }
        }

        public float TotalQty
        {
            get
            {
                return fltTotalQty;
            }
            set
            {
                fltTotalQty = value;
            }
        }

        public decimal TotalAmount
        {
            get
            {
                return decTotalAmount;
            }
            set
            {
                decTotalAmount = value;
            }
        }

        public decimal PurchasePrice
        {
            get
            {
                return decPurchasePrice;
            }
            set
            {
                decPurchasePrice = value;
            }
        }

        public decimal SellingPrice
        {
            get
            {
                return decSellingPrice;
            }
            set
            {
                decSellingPrice = value;
            }
        }

        public decimal Discount
        {
            get
            {
                return decDiscount;
            }
            set
            {
                decDiscount = value;
            }
        }

        public decimal Amount
        {
            get
            {
                return decAmount;
            }
            set
            {
                decAmount = value;
            }
        }

        public decimal InvAmount
        {
            get
            {
                return decInvAmount;
            }
            set
            {
                decInvAmount = value;
            }
        }

        public decimal GrossAmount
        {
            get
            {
                return decGrossAmount;
            }
            set
            {
                decGrossAmount = value;
            }
        }

        public decimal Tax
        {
            get
            {
                return decTax;
            }
            set
            {
                decTax = value;
            }
        }

        public string SqlStatement
        {
            get
            {
                return strSqlStatement;
            }
            set
            {
                strSqlStatement = value;
            }
        }

        public string DataetName
        {
            get
            {
                return strDataSetName;
            }
            set
            {
                strDataSetName = value;
            }
        }

        public DataSet GetItemDataset
        {
            get
            {
                return dsItemDataSet;
            }
            set
            {
                dsItemDataSet = value;
            }
        }

        public DataSet GetSupplierDataset
        {
            get
            {
                return dsSupplierDataSet ;
            }
            set
            {
                dsSupplierDataSet = value;
            }
        }

        public DataSet GetReportDataset
        {
            get
            {
                return dsForReport ;
            }
            set
            {
                dsForReport = value;
            }
        }

        public DataSet TempGrn
        {
            get
            {
                return dsTempGrn;
            }
            set
            {
                dsTempGrn = value;
            }
        }

        public Boolean RecordFound
        {
            get
            {
                return blRecordFound;
            }
            set
            {
                blRecordFound = value;
            }
        }

        #endregion

        //Get Tempory Document No
        public void GetTempDocumentNo()
        {
            DataReader = dbcon.GetReader(strSqlStatement + LoginManager.LocaCode);
            if (DataReader.Read())
            {
                intTempDocNo = (int)DataReader.GetSqlInt32(0);
                //String.Format("{0:00000}", 15); 
                strTempDocumentNo = string.Format("{0:000000}", intTempDocNo);
                if (LoginManager.UserName.Trim().Length > 2)
                {
                    strTempDocumentNo = LoginManager.UserName.Trim().Substring(0, 2).ToUpper() + LoginManager.LocaCode.Trim().Substring(0, 2) + strTempDocumentNo; ;
                }
                else
                {
                    strTempDocumentNo = LoginManager.UserName.Trim().ToUpper() + "0" + LoginManager.LocaCode.Trim().Substring(0, 2) + strTempDocumentNo; ;
                }
            }
            dbcon.CloseReader();
            DataReader.Dispose();

            //UpDate Record No
            intErrCode = 0;
            dbcon.connection.Open();
            SqlCommand command = new SqlCommand();
            command.Connection = dbcon.connection;
            command.CommandType = CommandType.StoredProcedure;
            command.CommandText = "sp_UpdateTempDocNo";
            command.Parameters.Clear();
            command.Parameters.Add(new SqlParameter("@Err_x", SqlDbType.Int, 0, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Default, intErrCode));
            command.Parameters.Add(new SqlParameter("@Iid", SqlDbType.NVarChar, 5, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, "GRN"));
            command.Parameters.Add(new SqlParameter("@Loca", SqlDbType.VarChar, 5, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, LoginManager.LocaCode));

            command.ExecuteNonQuery();
            command.UpdatedRowSource = UpdateRowSource.OutputParameters;
            ErrorCode = (int)(command.Parameters["@Err_x"].Value);
            dbcon.connection.Close();

            GetTempDataset();
        }

        public void GetTempDataset()
        {
            //get Temporary DataSet For Grn
            dsTempGrn = dbcon.getDataset("select Prod_Code, Prod_Name, Unit, Purchase_Price, Selling_Price, Qty, FreeQty, Discount,Amount FROM TransactionTemp_Details WHERE Doc_No = '" + strTempDocumentNo + "' AND IId = 'GRN' AND Loca = " + LoginManager.LocaCode + " Order by Ln", "GoodReceivedNote");
        }

        public void GetItemDetails()
        {
            dsItemDataSet = dbcon.getDataset(strSqlStatement, strDataSetName);
        }

        public void GetSupplierDetails()
        {
            dsSupplierDataSet = dbcon.getDataset(strSqlStatement, strDataSetName);
        }

        public void ReadProductDetails()
        {
            DataReader = dbcon.GetReader(strSqlStatement + LoginManager.LocaCode);
            blRecordFound = false;
            if (DataReader.Read())
            {
                strProductCode = DataReader["Prod_Code"].ToString();
                strProductName = DataReader["Prod_Name"].ToString();
                fltCurrentQty = (float)DataReader.GetSqlDouble(4);
                intPackSize = (int)DataReader.GetSqlInt16(5);
                decPurchasePrice = (decimal)DataReader["Purchase_price"];
                decSellingPrice = (decimal)DataReader["Selling_Price"];
                strUnit = DataReader["Unit"].ToString();
                blRecordFound = true;
            }
            else
            {
                strProductCode = string.Empty;
                strProductName = string.Empty;
                fltCurrentQty = 0;
                decPurchasePrice = 0;
                decSellingPrice = 0;
                strUnit = string.Empty;
                blRecordFound = false;
            }
            dbcon.CloseReader();
            DataReader.Dispose();
        }

        public void ReadSupplierDetails()
        {
            DataReader = dbcon.GetReader(strSqlStatement );
            blRecordFound = false;
            if (DataReader.Read())
            {
                strSuppCode  = DataReader["Supp_Code"].ToString();
                strSuppName  = DataReader["Supp_Name"].ToString();
                blRecordFound = true;
            }
            else
            {
                strSuppCode = string.Empty;
                strSuppName = string.Empty;
                blRecordFound = false;
            }
            dbcon.CloseReader();
            DataReader.Dispose();
        }

        public void ReadExsistProductDetails()
        {
            DataReader = dbcon.GetReader(strSqlStatement + LoginManager.LocaCode);
            if (DataReader.Read())
            {
                fltQty = (float)DataReader.GetSqlDouble(0);
            }
            else
            {
                fltQty = 0;
            }
            dbcon.CloseReader();
            DataReader.Dispose();
        }

        public void UpdateGrnTempDataSet()
        {
            intErrCode = 0;
            dbcon.connection.Open();
            SqlCommand command = new SqlCommand();
            command.Connection = dbcon.connection;
            command.CommandType = CommandType.StoredProcedure;
            command.CommandText = "sp_GrnTemp_Update";
            command.Parameters.Clear();
            command.Parameters.Add(new SqlParameter("@Err_x", SqlDbType.Int, 0, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Default, intErrCode));
            command.Parameters.Add(new SqlParameter("@Doc_No", SqlDbType.NVarChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, strTempDocumentNo));
            command.Parameters.Add(new SqlParameter("@Loca", SqlDbType.VarChar, 5, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, LoginManager.LocaCode));
            command.Parameters.Add(new SqlParameter("@Iid", SqlDbType.NVarChar, 5, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, "GRN"));
            command.Parameters.Add(new SqlParameter("@Prod_Code", SqlDbType.NVarChar, 25, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, strProductCode));
            command.Parameters.Add(new SqlParameter("@Prod_Name", SqlDbType.NVarChar, 100, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, strProductName));
            command.Parameters.Add(new SqlParameter("@Qty", SqlDbType.Float, 0, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, fltQty));
            command.Parameters.Add(new SqlParameter("@FreeQty", SqlDbType.Float, 0, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, fltFreeQty));
            command.Parameters.Add(new SqlParameter("@Purchase_price", SqlDbType.Money, 0, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, decPurchasePrice));
            command.Parameters.Add(new SqlParameter("@Selling_Price", SqlDbType.Money, 0, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, decSellingPrice));
            command.Parameters.Add(new SqlParameter("@Unit", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, strUnit));
            command.Parameters.Add(new SqlParameter("@Pack_Size", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, intPackSize));
            command.Parameters.Add(new SqlParameter("@Disc", SqlDbType.VarChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, strDisc ));
            command.Parameters.Add(new SqlParameter("@Discount", SqlDbType.Money, 0, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, decDiscount));
            command.Parameters.Add(new SqlParameter("@Amount", SqlDbType.Money, 0, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, decAmount));

            command.ExecuteNonQuery();
            command.UpdatedRowSource = UpdateRowSource.OutputParameters;
            ErrorCode = (int)(command.Parameters["@Err_x"].Value);
            dbcon.connection.Close();
        }

        public void GetTotalValues()
        {
            SqlCommand command = new SqlCommand();
            command = dbcon.connection.CreateCommand();
            command.CommandText = "select isnull(sum(Amount),0) from TransactionTemp_Details WHERE Iid = 'GRN' AND Loca = '" + LoginManager.LocaCode + "' AND Doc_No = '" + strTempDocumentNo + "'";
            dbcon.OpenConnection();
            decTotalAmount = decimal.Parse(command.ExecuteScalar().ToString());
            command.CommandText = "select isnull(sum(Qty),0) from TransactionTemp_Details WHERE Iid = 'GRN' AND Loca = '" + LoginManager.LocaCode + "' AND Doc_No = '" + strTempDocumentNo + "'";
            fltTotalQty = float.Parse(command.ExecuteScalar().ToString());
            dbcon.CloseConnection();
        }

        public void GetOrgDocumentNo()
        {
            DataReader = dbcon.GetReader("select Grn from DocumentNoDetails WHERE Loca = " + LoginManager.LocaCode);
            if (DataReader.Read())
            {
                intTempDocNo = (int)DataReader.GetSqlInt32(0);
                //String.Format("{0:00000}", 15); 
                strOrgDocNo = string.Format("{0:000000}", intTempDocNo);
                if (LoginManager.UserName.Trim().Length > 2)
                {
                    strOrgDocNo = LoginManager.UserName.Trim().Substring(0, 2).ToUpper() + LoginManager.LocaCode.Trim().Substring(0, 2) + strOrgDocNo; ;
                }
                else
                {
                    strOrgDocNo = LoginManager.UserName.Trim().ToUpper() + "0" + LoginManager.LocaCode.Trim().Substring(0, 2) + strOrgDocNo; ;
                }
            }
            dbcon.CloseReader();
            DataReader.Dispose();
        }

        public void GoodReceivedNoteApply()
        {
            DateTime PostDate = DateTime.Now;

            intErrCode = 0;
            //Get Orginal Document No
            GetOrgDocumentNo();
            strPostDate = string.Format("{0:dd/MM/yyyy}", PostDate);

            dbcon.connection.Open();
            SqlCommand command = new SqlCommand();
            command.Connection = dbcon.connection;
            command.CommandType = CommandType.StoredProcedure;
            command.CommandText = "sp_GoodReceivedNoteApply";
            command.Parameters.Clear();
            command.Parameters.Add(new SqlParameter("@Err_x", SqlDbType.Int, 0, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Default, intErrCode));
            command.Parameters.Add(new SqlParameter("@Loca", SqlDbType.NVarChar, 5, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, LoginManager.LocaCode));
            command.Parameters.Add(new SqlParameter("@TempDocNo", SqlDbType.NVarChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, strTempDocumentNo));
            command.Parameters.Add(new SqlParameter("@OrgDoc_No", SqlDbType.NVarChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, strOrgDocNo));
            command.Parameters.Add(new SqlParameter("@PoNo", SqlDbType.NVarChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, strPoNo));
            command.Parameters.Add(new SqlParameter("@Supp_Code", SqlDbType.NVarChar, 15, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, strSuppCode));
            command.Parameters.Add(new SqlParameter("@Inv_No", SqlDbType.NVarChar, 30, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, strInvNo));
            command.Parameters.Add(new SqlParameter("@Inv_Amt", SqlDbType.Money, 0, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, decInvAmount));
            command.Parameters.Add(new SqlParameter("@Pay_Type", SqlDbType.NVarChar, 15, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default,strPay_Type ));
            command.Parameters.Add(new SqlParameter("@Reference", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, strReference ));
            command.Parameters.Add(new SqlParameter("@Remarks", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, strRemark ));
            command.Parameters.Add(new SqlParameter("@Iid", SqlDbType.NVarChar, 5, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, "GRN"));
            command.Parameters.Add(new SqlParameter("@Post_Date", SqlDbType.NVarChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, strPostDate));
            command.Parameters.Add(new SqlParameter("@User_Name", SqlDbType.NVarChar, 100, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, LoginManager.UserName.Trim().ToUpper()));
            command.Parameters.Add(new SqlParameter("@GrossAmount", SqlDbType.Money, 0, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, decGrossAmount));
            command.Parameters.Add(new SqlParameter("@Discount", SqlDbType.Money, 0, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, decDiscount));
            command.Parameters.Add(new SqlParameter("@Disc", SqlDbType.NVarChar, 100, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, strDisc ));
            command.Parameters.Add(new SqlParameter("@Tax", SqlDbType.Money, 0, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, decTax ));
            command.Parameters.Add(new SqlParameter("@Amount", SqlDbType.Money, 0, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, decTotalAmount));

            command.ExecuteNonQuery();
            command.UpdatedRowSource = UpdateRowSource.OutputParameters;
            ErrorCode = (int)(command.Parameters["@Err_x"].Value);
            dbcon.connection.Close();
        }

        public void GetDataSetForReport()
        {
            dsForReport = dbcon.getDataset("SELECT Transaction_Header.Doc_no, Transaction_Header.Supplier_Id ,Supplier.Supp_Name, Transaction_Header.Loca,Location.Loca_Descrip, Transaction_Header.Post_Date, Transaction_Header.inv_no, Transaction_Header.Inv_Amt, Transaction_Header.Porder_no, Transaction_Header.Net_Amount,Transaction_Header.Amount Gross_Amount ,Transaction_Header.Discount Sub_Discount, Transaction_Header.Disc, Transaction_Header.Remarks, Transaction_Header.Reference, Transaction_Header.Pay_Type, Transaction_Header.Tax,Transaction_Details.Prod_code, Transaction_Details.Prod_Name, Transaction_Details.Qty, Transaction_Details.FreeQty, Transaction_Details.Purchase_Price, Transaction_Details.Selling_Price, Transaction_Details.Discount, Transaction_Details.Amount, Transaction_Details.Ln, 'Original' Status FROM Transaction_Header INNER JOIN Transaction_Details ON Transaction_Header.Doc_No = Transaction_Details.Doc_No AND Transaction_Header.Loca = Transaction_Details.Loca AND Transaction_Header.Iid = Transaction_Details.Iid INNER JOIN Location ON Transaction_Header.Loca = Location.Loca INNER JOIN supplier ON Transaction_Header.Supplier_Id = supplier.supp_code WHERE Transaction_Header.Doc_No = '" + strOrgDocNo + "' AND Transaction_Header.Loca = '" + LoginManager.LocaCode + "' AND Transaction_Header.Iid = 'GRN' ORDER BY Ln", "dsGRNDetailsForRep");
        }

        public void DeleteProductDetaile()
        {
            intErrCode = 0;
            dbcon.connection.Open();
            SqlCommand command = new SqlCommand();
            command.Connection = dbcon.connection;
            command.CommandType = CommandType.StoredProcedure;
            command.CommandText = "sp_GrnTemp_Delete";
            command.Parameters.Clear();
            command.Parameters.Add(new SqlParameter("@Err_x", SqlDbType.Int, 0, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Default, intErrCode));
            command.Parameters.Add(new SqlParameter("@Doc_No", SqlDbType.NVarChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, strTempDocumentNo));
            command.Parameters.Add(new SqlParameter("@Loca", SqlDbType.VarChar, 5, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, LoginManager.LocaCode));
            command.Parameters.Add(new SqlParameter("@Iid", SqlDbType.NVarChar, 5, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, "GRN"));
            command.Parameters.Add(new SqlParameter("@Prod_Code", SqlDbType.NVarChar, 25, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, strProductCode));

            command.ExecuteNonQuery();
            command.UpdatedRowSource = UpdateRowSource.OutputParameters;
            ErrorCode = (int)(command.Parameters["@Err_x"].Value);
            dbcon.connection.Close();
        }

        public void GoodReceivedNoteSave()
        {
            DateTime PostDate = DateTime.Now;

            intErrCode = 0;
            //Get Orginal Document No
            //GetSaveDocumentNo();
            //Document Save with the Temorary Document No
            strOrgDocNo = strTempDocumentNo;

            strPostDate = string.Format("{0:dd/MM/yyyy}", PostDate);

            dbcon.connection.Open();
            SqlCommand command = new SqlCommand();
            command.Connection = dbcon.connection;
            command.CommandType = CommandType.StoredProcedure;
            command.CommandText = "sp_GoodReceivedNoteSave";
            command.Parameters.Clear();
            command.Parameters.Add(new SqlParameter("@Err_x", SqlDbType.Int, 0, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Default, intErrCode));
            command.Parameters.Add(new SqlParameter("@Loca", SqlDbType.NVarChar, 5, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, LoginManager.LocaCode));
            command.Parameters.Add(new SqlParameter("@TempDocNo", SqlDbType.NVarChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, strTempDocumentNo));
            command.Parameters.Add(new SqlParameter("@OrgDoc_No", SqlDbType.NVarChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, strOrgDocNo));
            command.Parameters.Add(new SqlParameter("@PoNo", SqlDbType.NVarChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, strPoNo));
            command.Parameters.Add(new SqlParameter("@Supp_Code", SqlDbType.NVarChar, 15, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, strSuppCode));
            command.Parameters.Add(new SqlParameter("@Inv_No", SqlDbType.NVarChar, 30, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, strInvNo));
            command.Parameters.Add(new SqlParameter("@Inv_Amt", SqlDbType.Money, 0, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, decInvAmount));
            command.Parameters.Add(new SqlParameter("@Pay_Type", SqlDbType.NVarChar, 15, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, strPay_Type));
            command.Parameters.Add(new SqlParameter("@Reference", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, strReference));
            command.Parameters.Add(new SqlParameter("@Remarks", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, strRemark));
            command.Parameters.Add(new SqlParameter("@Iid", SqlDbType.NVarChar, 5, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, "GRN"));
            command.Parameters.Add(new SqlParameter("@Post_Date", SqlDbType.NVarChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, strPostDate));
            command.Parameters.Add(new SqlParameter("@User_Name", SqlDbType.NVarChar, 100, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, LoginManager.UserName.Trim().ToUpper()));
            command.Parameters.Add(new SqlParameter("@GrossAmount", SqlDbType.Money, 0, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, decGrossAmount));
            command.Parameters.Add(new SqlParameter("@Discount", SqlDbType.Money, 0, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, decDiscount));
            command.Parameters.Add(new SqlParameter("@Disc", SqlDbType.NVarChar, 100, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, strDisc));
            command.Parameters.Add(new SqlParameter("@Tax", SqlDbType.Money, 0, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, decTax));
            command.Parameters.Add(new SqlParameter("@Amount", SqlDbType.Money, 0, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, decTotalAmount));

            command.ExecuteNonQuery();
            command.UpdatedRowSource = UpdateRowSource.OutputParameters;
            ErrorCode = (int)(command.Parameters["@Err_x"].Value);
            dbcon.connection.Close();
        }

        public void ReadSavedDocument()
        {
            DataReader = dbcon.GetReader(strSqlStatement + LoginManager.LocaCode);
            blRecordFound = false;
            if (DataReader.Read())
            {
                strTempDocumentNo = strRecallSaveDocNo;
                strSuppCode = DataReader["Supplier_Id"].ToString();
                strSuppName  = DataReader["Supp_Name"].ToString();
                strPoNo =DataReader["Porder_No"].ToString();
                strPay_Type = DataReader["Pay_Type"].ToString();
                decInvAmount = (decimal)DataReader["Inv_Amt"];
                strInvNo = DataReader["Inv_No"].ToString();
                strRemark = DataReader["Remarks"].ToString();
                strReference  = DataReader["Reference"].ToString();
                decTax  = (decimal)DataReader["Tax"];
                decDiscount = (decimal)DataReader["Discount"];

                blRecordFound = true;
            }
            else
            {
                strProductCode = string.Empty;
                strProductName = string.Empty;
                fltCurrentQty = 0;
                decPurchasePrice = 0;
                decSellingPrice = 0;
                blRecordFound = false;
            }
            dbcon.CloseReader();
            DataReader.Dispose();

            //Reload Saved Items to the Tempory
            if (blRecordFound == true)
            {
                dbcon.connection.Open();
                SqlCommand command = new SqlCommand();
                command.Connection = dbcon.connection;
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "sp_GoodReceivedNoteRecall";
                command.Parameters.Clear();
                command.Parameters.Add(new SqlParameter("@Err_x", SqlDbType.Int, 0, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Default, intErrCode));
                command.Parameters.Add(new SqlParameter("@Loca", SqlDbType.NVarChar, 5, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, LoginManager.LocaCode));
                command.Parameters.Add(new SqlParameter("@TempDocNo", SqlDbType.NVarChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, strRecallSaveDocNo));
                command.Parameters.Add(new SqlParameter("@Iid", SqlDbType.NVarChar, 5, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, "GRN"));

                command.ExecuteNonQuery();
                command.UpdatedRowSource = UpdateRowSource.OutputParameters;
                ErrorCode = (int)(command.Parameters["@Err_x"].Value);
                dbcon.connection.Close();
            }
            //***
        }

        public void ReadPurchaseOrderDocument()
        {
            DataReader = dbcon.GetReader(strSqlStatement + LoginManager.LocaCode);
            blRecordFound = false;
            if (DataReader.Read())
            {
                strSuppCode = DataReader["Supplier_Id"].ToString();
                strSuppName = DataReader["Supp_Name"].ToString();
                strPoNo = DataReader["Doc_No"].ToString();
                strPay_Type = DataReader["Pay_Type"].ToString();
                decInvAmount = (decimal)DataReader["Net_Amount"];
                strInvNo = string.Empty;
                strRemark = DataReader["Remarks"].ToString();
                strReference = string.Empty;
                decTax = (decimal)DataReader["Tax"];
                decDiscount = 0;
                blRecordFound = true;
            }
            else
            {
                strProductCode = string.Empty;
                strProductName = string.Empty;
                strPoNo = string.Empty;
                strPay_Type = string.Empty;
                decInvAmount = 0;
                strInvNo = string.Empty;
                strRemark = string.Empty;
                strReference = string.Empty;
                decTax = 0;
                decDiscount = 0;
                blRecordFound = false;
            }
            dbcon.CloseReader();
            DataReader.Dispose();

            //Reload Purchase Order Items to the Tempory
            if (blRecordFound == true)
            {
                dbcon.connection.Open();
                SqlCommand command = new SqlCommand();
                command.Connection = dbcon.connection;
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "sp_POToGrnRecall";
                command.Parameters.Clear();
                command.Parameters.Add(new SqlParameter("@Err_x", SqlDbType.Int, 0, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Default, intErrCode));
                command.Parameters.Add(new SqlParameter("@Loca", SqlDbType.NVarChar, 5, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, LoginManager.LocaCode));
                command.Parameters.Add(new SqlParameter("@TempDocNo", SqlDbType.NVarChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, strTempDocumentNo  ));
                command.Parameters.Add(new SqlParameter("@PoNo", SqlDbType.NVarChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, strPoNo ));
                command.Parameters.Add(new SqlParameter("@Iid", SqlDbType.NVarChar, 5, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, "PON"));

                command.ExecuteNonQuery();
                command.UpdatedRowSource = UpdateRowSource.OutputParameters;
                ErrorCode = (int)(command.Parameters["@Err_x"].Value);
                dbcon.connection.Close();
            }
            //***
        }

        public void ReadTempTransDetails()
        {
            DataReader = dbcon.GetReader(strSqlStatement);
            blRecordFound = false;
            if (DataReader.Read())
            {
                blRecordFound = true;
            }
            else
            {
                blRecordFound = false;
            }
            dbcon.CloseReader();
            DataReader.Dispose();
        }

        public void GetDataSetForPreview()
        {
            DateTime PostDate = DateTime.Now;
            strPostDate = string.Format("{0:dd/MM/yyyy}", PostDate);
            dsForReport = dbcon.getDataset("SELECT '" + strTempDocumentNo + "' Doc_no, '" + strSuppCode + "' Supplier_Id,'" + strSuppName + "' Supp_Name, '" + LoginManager.LocaCode + "' Loca,'" + LoginManager.Location + "' Loca_Descrip, '" + strPostDate + "' Post_Date, '" + strInvNo + "' inv_no,'" + decInvAmount + "' Inv_Amt, '" + strPoNo + "' Porder_no, " + decAmount + " Net_Amount, " + decGrossAmount + " Gross_Amount ," + decDiscount + " Sub_Discount, '" + strDisc + "' Disc, '" + strRemark + "' Remarks, '" + strReference + "' Reference, '" + strPay_Type + "' Pay_Type, " + decTax + " Tax,TransactionTemp_Details.Prod_code, TransactionTemp_Details.Prod_Name, TransactionTemp_Details.Qty, TransactionTemp_Details.FreeQty, TransactionTemp_Details.Purchase_Price, TransactionTemp_Details.Selling_Price, TransactionTemp_Details.Discount, TransactionTemp_Details.Amount, TransactionTemp_Details.Ln, 'Temporary' Status FROM TransactionTemp_Details WHERE TransactionTemp_Details.Doc_No = '" + strTempDocumentNo + "' AND TransactionTemp_Details.Loca = '" + LoginManager.LocaCode + "' AND TransactionTemp_Details.Iid = 'GRN' ORDER BY Ln", "dsGRNDetailsForRep");
        }
    }
}
