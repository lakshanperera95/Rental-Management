using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.Data.SqlClient;
using System.Windows.Forms;
using DbConnection;

namespace clsLibrary
{
    public class clsStockOverwrite
    {
#region Genaral declarations
		private SqlDataReader DataReader;
        private DataSet dsItemDataSet;
        private string strSqlString;
        private string strDataSetName;

        private string strProductCode;
        private string strProductName;
        private float fltCurrentQty;
        private decimal decPurchasePrice;
        private decimal decSellingPrice;


        private int intTempDocNo;
        private int intErrCode;
        private string strTempDocumentNo;
        private string strOrgDocNo;

        private string strPostDate;


        private float fltPhyQty;
        private float fltCurrentTotalQty;
        private float fltPhyTotalQty;


        private decimal decAmount;
        private int intPackSize;

        private DataSet dsTempStockAdjust;
        private DataSet dsForReport;


#endregion
        #region Properties
        public string SqlString {
            set
            {
                strSqlString = value;
            }

            get 
            {
                return strSqlString;
            }
        
        }

        public string DataSetName
        {
            set
            {
                strDataSetName = value;
            }

            get
            {
                return strDataSetName;
            }

        }

        public DataSet ItemDataSet
        {
            set
            {
                dsItemDataSet = value;
            }

            get
            {
                return dsItemDataSet;
            }

        }

        public string ProductCode
        {
            get
            {
                return strProductCode;
            }
            set
            {
                strProductCode = value;
            }
        }

        public string ProductName
        {
            get
            {
                return strProductName;
            }
            set
            {
                strProductName = value;
            }
        }

        public float CurrentQty
        {
            get
            {
                return fltCurrentQty;
            }
            set
            {
                fltCurrentQty = value;
            }
        }

        public decimal PurchasePrice
        {
            get
            {
                return decPurchasePrice;
            }
            set
            {
                decPurchasePrice = value;
            }
        }

        public decimal SellingPrice
        {
            get
            {
                return decSellingPrice;
            }
            set
            {
                decSellingPrice = value;
            }
        }

        public string TempDocNo
        {
            get
            {
                return strTempDocumentNo;
            }
            set
            {
                strTempDocumentNo = value;
            }
        }

        public string OrgDocNo
        {
            get
            {
                return strOrgDocNo;
            }
            set
            {
                strOrgDocNo = value;
            }
        }

        public string DataetName
        {
            get
            {
                return strDataSetName;
            }
            set
            {
                strDataSetName = value;
            }
        }

        public float CurrentTotalQty
        {
            get
            {
                return fltCurrentTotalQty;
            }
            set
            {
                fltCurrentTotalQty = value;
            }
        }

        public float PhyTotalQty
        {
            get
            {
                return fltPhyTotalQty;
            }
            set
            {
                fltPhyTotalQty = value;
            }
        }

        public float PhyQty
        {
            get
            {
                return fltPhyQty;
            }
            set
            {
                fltPhyQty = value;
            }
        }

        public int PackSize
        {
            get
            {
                return intPackSize;
            }
            set
            {
                intPackSize = value;
            }
        }

        public int ErrorCode
        {
            get
            {
                return intErrCode;
            }
            set
            {
                intErrCode = value;
            }
        }

        public DataSet GetItemDataset
        {
            get
            {
                return dsItemDataSet;
            }
            set
            {
                dsItemDataSet = value;
            }
        }

        public DataSet GetTempStockAdjustDataSet
        {
            get
            {
                return dsTempStockAdjust;
            }
            set
            {
                dsTempStockAdjust = value;
            }
        }

        public DataSet GetReportDataset
        {
            get
            {
                return dsForReport;
            }
            set
            {
                dsForReport = value;
            }
        }
        #endregion

        public void GetProduct()
        {
            dsItemDataSet = dbcon.getDataset(strSqlString, strDataSetName);
        }

        public void ReadProductDetails()
        {
            DataReader = dbcon.GetReader(strSqlString);

            while (DataReader.Read())
            {
                try {
                //SELECT P.Prod_Code, P.Prod_Name, P.Purchase_price, P.Selling_Price, S.Qty FROM product P INNER JOIN Stock_Master S ON P.Prod_Code = S.Prod_Code
                strProductCode = DataReader[0].ToString();
                strProductName = DataReader[1].ToString();
                decPurchasePrice = (decimal)DataReader[2];
                decSellingPrice = (decimal)DataReader[3];
                fltCurrentQty = (float)DataReader.GetSqlDouble(4);
                }catch (Exception ex)
                {
                    MessageBox.Show(ex.Message.ToString());
                }
            }
            dbcon.CloseReader();
            DataReader.Dispose();
        }

        public void UpdateStockAdjustDataSet()
        {
            intErrCode = 0;
            dbcon.connection.Open();
            SqlCommand command = new SqlCommand();
            command.Connection = dbcon.connection;
            command.CommandType = CommandType.StoredProcedure;
            command.CommandText = "sp_StAdjustTransactionTemp_Update";
            command.Parameters.Clear();
            command.Parameters.Add(new SqlParameter("@Err_x", SqlDbType.Int, 0, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Default, intErrCode));
            command.Parameters.Add(new SqlParameter("@Doc_No", SqlDbType.NVarChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, strTempDocumentNo));
            command.Parameters.Add(new SqlParameter("@Loca", SqlDbType.VarChar, 5, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, LoginManager.LocaCode));
            command.Parameters.Add(new SqlParameter("@Iid", SqlDbType.NVarChar, 5, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, "STA"));
            command.Parameters.Add(new SqlParameter("@Prod_Code", SqlDbType.NVarChar, 25, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, strProductCode));
            command.Parameters.Add(new SqlParameter("@Prod_Name", SqlDbType.NVarChar, 100, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, strProductName));
            command.Parameters.Add(new SqlParameter("@Qty", SqlDbType.Float, 0, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, fltCurrentQty));
            command.Parameters.Add(new SqlParameter("@Phy_Qty", SqlDbType.Float, 0, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, fltPhyQty));
            command.Parameters.Add(new SqlParameter("@Purchase_price", SqlDbType.Money, 0, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, decPurchasePrice));
            command.Parameters.Add(new SqlParameter("@Selling_Price", SqlDbType.Money, 0, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, decSellingPrice));
            command.Parameters.Add(new SqlParameter("@Pack_Size", SqlDbType.Int, 0, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, intPackSize));
            command.Parameters.Add(new SqlParameter("@Amount", SqlDbType.Money, 0, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, decAmount));
            command.ExecuteNonQuery();
            command.UpdatedRowSource = UpdateRowSource.OutputParameters;
            ErrorCode = (int)(command.Parameters["@Err_x"].Value);
            dbcon.connection.Close();
        }

        public void GetTempDataset()
        {
            //get Temporary DataSet For Stock Adjustent
            dsTempStockAdjust = dbcon.getDataset("SELECT Prod_Code, Prod_Name, Selling_Price, Purchase_price, Pack_Size, Qty  Curr_qty, Phy_Qty, (Phy_Qty - Qty) Var_Qty FROM TransactionTemp_Details WHERE Doc_No = '" + strTempDocumentNo + "' AND IId = 'STA' AND Loca = " + LoginManager.LocaCode + " Order by Ln", "StockAdjust");
        }

        public void GetTotalValues()
        {
            SqlCommand command = new SqlCommand();
            command = dbcon.connection.CreateCommand();
            command.CommandText = "select isnull(sum(Phy_Qty),0) from TransactionTemp_Details WHERE Iid = 'STA' AND Loca = '" + LoginManager.LocaCode + "' AND Doc_No = '" + strTempDocumentNo + "'";
            dbcon.OpenConnection();
            fltPhyTotalQty = float.Parse(command.ExecuteScalar().ToString());
            command.CommandText = "select isnull(sum(Qty),0) from TransactionTemp_Details WHERE Iid = 'STA' AND Loca = '" + LoginManager.LocaCode + "' AND Doc_No = '" + strTempDocumentNo + "'";
            fltCurrentTotalQty = float.Parse(command.ExecuteScalar().ToString());
            dbcon.CloseConnection();
        }

        public void GetTempDocumentNo()
        {
            DataReader = dbcon.GetReader(strSqlString + LoginManager.LocaCode);
            if (DataReader.Read())
            {
                intTempDocNo = (int)DataReader.GetSqlInt32(0);
                //String.Format("{0:00000}", 15); 
                strTempDocumentNo = string.Format("{0:000000}", intTempDocNo);
                if (LoginManager.UserName.Trim().Length > 2)
                {
                    strTempDocumentNo = LoginManager.UserName.Trim().Substring(0, 2).ToUpper() + LoginManager.LocaCode.Trim().Substring(0, 2) + strTempDocumentNo; ;
                }
                else
                {
                    strTempDocumentNo = LoginManager.UserName.Trim().ToUpper() + "0" + LoginManager.LocaCode.Trim().Substring(0, 2) + strTempDocumentNo; ;
                }
            }
            dbcon.CloseReader();
            DataReader.Dispose();

            //UpDate Record No
            intErrCode = 0;
            dbcon.connection.Open();
            SqlCommand command = new SqlCommand();
            command.Connection = dbcon.connection;
            command.CommandType = CommandType.StoredProcedure;
            command.CommandText = "sp_UpdateTempDocNo";
            command.Parameters.Clear();
            command.Parameters.Add(new SqlParameter("@Err_x", SqlDbType.Int, 0, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Default, intErrCode));
            command.Parameters.Add(new SqlParameter("@Iid", SqlDbType.NVarChar, 5, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, "STA"));
            command.Parameters.Add(new SqlParameter("@Loca", SqlDbType.VarChar, 5, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, LoginManager.LocaCode));

            command.ExecuteNonQuery();
            command.UpdatedRowSource = UpdateRowSource.OutputParameters;
            ErrorCode = (int)(command.Parameters["@Err_x"].Value);
            dbcon.connection.Close();

            GetTempDataset();
        }

        public void GetOrgDocumentNo()
        {
            DataReader = dbcon.GetReader("select Stadd from DocumentNoDetails WHERE Loca = " + LoginManager.LocaCode);
            if (DataReader.Read())
            {
                intTempDocNo = (int)DataReader.GetSqlInt32(0);
                //String.Format("{0:00000}", 15); 
                strOrgDocNo = string.Format("{0:000000}", intTempDocNo);
                if (LoginManager.UserName.Trim().Length > 2)
                {
                    strOrgDocNo = LoginManager.UserName.Trim().Substring(0, 2).ToUpper() + LoginManager.LocaCode.Trim().Substring(0, 2) + strOrgDocNo; ;
                }
                else
                {
                    strOrgDocNo = LoginManager.UserName.Trim().ToUpper() + "0" + LoginManager.LocaCode.Trim().Substring(0, 2) + strOrgDocNo; ;
                }
            }
            dbcon.CloseReader();
            DataReader.Dispose();
        }

        public void StockAdjustApply()
        {
            DateTime PostDate = DateTime.Now;

            intErrCode = 0;
            //Get Orginal Document No
            GetOrgDocumentNo();
            strPostDate = string.Format("{0:dd/MM/yyyy}", PostDate);

            dbcon.connection.Open();
            SqlCommand command = new SqlCommand();
            command.Connection = dbcon.connection;
            command.CommandType = CommandType.StoredProcedure;
            command.CommandText = "sp_StAdjustApply";
            command.Parameters.Clear();
            command.Parameters.Add(new SqlParameter("@Err_x", SqlDbType.Int, 0, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Default, intErrCode));
            command.Parameters.Add(new SqlParameter("@Loca", SqlDbType.NVarChar, 5, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, LoginManager.LocaCode));
            command.Parameters.Add(new SqlParameter("@TempDocNo", SqlDbType.NVarChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, strTempDocumentNo));
            command.Parameters.Add(new SqlParameter("@OrgDoc_No", SqlDbType.NVarChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, strOrgDocNo));
            command.Parameters.Add(new SqlParameter("@Iid", SqlDbType.NVarChar, 5, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, "STA"));
            command.Parameters.Add(new SqlParameter("@Post_Date", SqlDbType.NVarChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, strPostDate));
            command.Parameters.Add(new SqlParameter("@User_Name", SqlDbType.NVarChar, 100, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, LoginManager.UserName.Trim().ToUpper()));

            command.ExecuteNonQuery();
            command.UpdatedRowSource = UpdateRowSource.OutputParameters;
            ErrorCode = (int)(command.Parameters["@Err_x"].Value);
            dbcon.connection.Close();
        }

        public void GetDataSetForReport()
        {
            dsForReport = dbcon.getDataset("select Transaction_Header.Loca, Location.Loca_Descrip, Transaction_Header.Doc_No, Transaction_Header.Post_Date, Transaction_Header.[User_Name], Transaction_Details.Prod_Code, Transaction_Details.Prod_Name, Transaction_Details.Qty, Transaction_Details.Phy_Qty, Transaction_Details.Purchase_Price, Transaction_Details.Selling_Price, Transaction_Details.Pack_Size, Transaction_Details.Ln, 'Original' Status FROM Transaction_Header INNER JOIN Transaction_Details ON Transaction_Header.Doc_no = Transaction_Details.Doc_no AND Transaction_Header.Loca = Transaction_Details.Loca AND Transaction_Header.Iid = Transaction_Details.Iid INNER JOIN Location ON Transaction_Header.Loca = Location.Loca WHERE Transaction_Header.doc_no = '" + strOrgDocNo + "' AND Transaction_Header.Loca = '" + LoginManager.LocaCode + "' AND Transaction_Header.Iid = 'STA' ORDER BY Ln", "dsStockAdjustDetails");
        }

        public void DeleteProductDetaile()
        {
            intErrCode = 0;
            dbcon.connection.Open();
            SqlCommand command = new SqlCommand();
            command.Connection = dbcon.connection;
            command.CommandType = CommandType.StoredProcedure;
            command.CommandText = "sp_StAdjustTemp_Delete";
            command.Parameters.Clear();
            command.Parameters.Add(new SqlParameter("@Err_x", SqlDbType.Int, 0, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Default, intErrCode));
            command.Parameters.Add(new SqlParameter("@Doc_No", SqlDbType.NVarChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, strTempDocumentNo));
            command.Parameters.Add(new SqlParameter("@Loca", SqlDbType.VarChar, 5, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, LoginManager.LocaCode));
            command.Parameters.Add(new SqlParameter("@Iid", SqlDbType.NVarChar, 5, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, "STA"));
            command.Parameters.Add(new SqlParameter("@Prod_Code", SqlDbType.NVarChar, 25, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, strProductCode));

            command.ExecuteNonQuery();
            command.UpdatedRowSource = UpdateRowSource.OutputParameters;
            ErrorCode = (int)(command.Parameters["@Err_x"].Value);
            dbcon.connection.Close();
        }

        public void DataForGrid() {
            dsItemDataSet = dbcon.getDataset(strSqlString, strDataSetName);
        
        
        }
    }
}
