using System;
using System.Collections.Generic;
using System.Text;
using System.Data.SqlClient;
using System.Data;
using System.Windows.Forms;
using DbConnection;
using System.IO;

namespace clsLibrary
{
    public class clsDepartment
    {
        private string strDepartment;
        private string strDescription;
        private int intErrCode;
        private string strMessage;

        private string strSqlString;
        private string strDatasetName;
        private Boolean blRecordFound;
        private SqlDataAdapter adapter;
        private DataSet ds = new DataSet ();
        private SqlDataReader DataReader;

        public string Department {
            get 
            { 
                return strDepartment;
            }
            set 
            {
                strDepartment = value;
            }
        }

        public string Description
        {
            get
            {
                return strDescription;
            }
            set
            {
                strDescription = value;
            }
        }

        public int ErrorCode
        {
            get
            {
                return intErrCode;
            }
            set
            {
                intErrCode = value;
            }
        }

        public DataSet GetDataset
        {
            get 
            {
                return ds;
            }
            set 
            {
                ds = value;
            }
        }

        public string SqlString
        {
            get
            {
                return strSqlString;
            }
            set
            {
                strSqlString = value;
            }

        }

        public String DatasetName
        {
            get
            {
                return strDatasetName;
            }
            set
            {
                strDatasetName = value;
            }
        }

        public Boolean RecordFound
        {
            get
            {
                return blRecordFound;
            }
            set
            {
                blRecordFound = value;
            }
        }

 #region // Method for INSERT & UPDATE 
        public void UpdateData(Control clearControl, Control focusControl)
        {
            try {
            intErrCode = 0;
            dbcon.connection.Open();
            SqlCommand command = new SqlCommand();
            command.Connection = dbcon.connection;
            command.CommandType = CommandType.StoredProcedure;
            command.CommandText = "sp_DepartmentFileUpdate";
            command.Parameters.Add(new SqlParameter("@Err_x", SqlDbType.Int, 0, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Default, intErrCode));
            command.Parameters.Add(new SqlParameter("@Dept_Code", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, strDepartment));
            command.Parameters.Add(new SqlParameter("@Dept_Name", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, strDescription));
            command.Parameters.Add(new SqlParameter("@User_Name", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, LoginManager.UserName));
          
                command.ExecuteNonQuery();
                command.UpdatedRowSource = UpdateRowSource.OutputParameters;
                ErrorCode = (int)(command.Parameters["@Err_x"].Value);
                dbcon.connection.Close();
                if (intErrCode == 0)
                {
                    MessageBox.Show("Record updated successfully", "Infomation", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    // clear used fields & focus to txtDepartment
                    Department = string.Empty;
                    Description = string.Empty;


                    clsClear.getclear().clearfeilds(clearControl, focusControl);
                }
                else
                {
                    MessageBox.Show("Error in Transaction", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }

            }
            catch (Exception ex){

                //Write to Log
                DateTime dtCurrentDate = DateTime.Now;
                FileStream fileStream = new FileStream(@"..\ErrorLog.txt", FileMode.Append);
                StreamWriter m_streamWriter = new StreamWriter(fileStream);
                try
                {
                    m_streamWriter.WriteLine("'Location :' " + LoginManager.LocaCode + " 'User Name :' " + LoginManager.UserName.Trim() + " 'Date/Time :' " + string.Format("{0:dd/MM/yyyy HH:mm:ss}", dtCurrentDate) + " Error Description " + ex.Message);
                    // read from file or write to file
                }
                finally
                {
                    m_streamWriter.Close();
                    fileStream.Close();
                }
                MessageBox.Show(ex.Message.ToString(), "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);

            }finally {
                dbcon.connection.Close();
            }

        }
#endregion 

 #region //Method for DELETE 
        public void DeleteData(string DeptCode, Control clear, Control focus)
        {
            try
            {
                dbcon.connection.Open();
                SqlCommand command = new SqlCommand();
                command.Connection = dbcon.connection;
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = "sp_DepartmentFileDelete";

                command.Parameters.Add(new SqlParameter("@Err_x", SqlDbType.Int, 0, ParameterDirection.Output, false, 0, 0, "", DataRowVersion.Default, intErrCode ));
                command.Parameters.Add(new SqlParameter("@Dept_Code", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, DeptCode));
                command.Parameters.Add(new SqlParameter("@User_Name", SqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Default, LoginManager.UserName));
                command.Parameters.Add(new SqlParameter("@getMessage", SqlDbType.VarChar, 50, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Default, "10"));

                command.ExecuteNonQuery();
                command.UpdatedRowSource = UpdateRowSource.OutputParameters;
                ErrorCode = (int)(command.Parameters["@Err_x"].Value);
                strMessage = (string)(command.Parameters["@getMessage"].Value);
                dbcon.connection.Close();
                if (intErrCode != 0)
                {
                    MessageBox.Show("an internal error has occurred while deleting the current record", "Location Details", MessageBoxButtons.OK, MessageBoxIcon.Stop);
                }
                else
                {
                    clsClear.getclear().clearfeilds(clear, focus);

                }

            }
            catch (
                SqlException ex)
            {
                MessageBox.Show(ex.Message.ToString(), "Location Details", MessageBoxButtons.OK, MessageBoxIcon.Error);

            }
            finally
            {
                dbcon.connection.Close();
            }
            MessageBox.Show(strMessage.ToString(), "Location Details", MessageBoxButtons.OK, MessageBoxIcon.Information);

        }
 #endregion

 #region //Retrive DataSet for SearchForm 
        public void retrieve_Department_code()
        {
            ds = dbcon.getDataset(strSqlString, strDatasetName);

        }

 #endregion

    public void ReadDepartmentDetails()
    {
        DataReader = dbcon.GetReader(strSqlString);
        blRecordFound = false;
        if (DataReader.Read())
        {
            strDepartment = DataReader["Dept_Code"].ToString();
            strDescription = DataReader["Dept_Name"].ToString();
            blRecordFound = true;
        }
        else
        {
            strDepartment = string.Empty;
            strDescription = string.Empty;
            blRecordFound = false;
        }
        dbcon.CloseReader();
        DataReader.Dispose();
    }
    }
}
