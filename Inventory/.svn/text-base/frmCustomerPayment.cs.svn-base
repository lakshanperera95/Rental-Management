using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using clsLibrary;
namespace Inventory
{
    public partial class frmCustomerPayment : Form
    {
        private DataSet dsBankName;
        private decimal decBalanceAmount;
        private decimal decSelectAmount;

        clsCustomerPayment objCustomerPayment = new clsCustomerPayment();

        public frmCustomerPayment()
        {
            InitializeComponent();
        }

        private static frmCustomerPayment CustomerPayment;

        private frmSearch search = new frmSearch();

        public static frmCustomerPayment GetCustomerPayment
        {
            get
            {
                return CustomerPayment;
            }
            set
            {
                CustomerPayment = value;
            }
        }

        private void btnClose_Click(object sender, EventArgs e)
        {
            this.Close();
            this.Dispose();
            CustomerPayment = null;
        }

        private void frmCustomerPayment_FormClosed(object sender, FormClosedEventArgs e)
        {
            CustomerPayment = null;
        }

        private void frmCustomerPayment_FormClosing(object sender, FormClosingEventArgs e)
        {
            // Hide the form...
            this.Hide();

            // Cancel the close...
            e.Cancel = true;
        }

        private void frmCustomerPayment_Load(object sender, EventArgs e)
        {
            objCustomerPayment.SqlStatement = "SELECT Temp_Receipt FROM DocumentNoDetails WHERE Loca = ";
            objCustomerPayment.GetTempDocumentNo();
            lblTempDocNo.Text = objCustomerPayment.TempDocNo;

            //Refreshing DataGrid View
            dataGridViewPendingPayments.DataSource = objCustomerPayment.GetPendingPayment.Tables["PendingPayments"];
            dataGridViewPendingPayments.Refresh();
            dataGridViewSelectedPayments.DataSource = objCustomerPayment.SelectedPayment.Tables["SelectedPayment"];
            dataGridViewSelectedPayments.Refresh();
            dataGridViewPayments.DataSource = objCustomerPayment.Payments.Tables["Payments"];
            dataGridViewPayments.Refresh();

            cmbPaymentMode.Items.Add("CASH");
            cmbPaymentMode.Items.Add("CHEQUE");

            objCustomerPayment.GetBankDetails();
            dsBankName = objCustomerPayment.BankName;
            cmbBankName.DataSource = dsBankName.Tables["BankDetails"];
            cmbBankName.DisplayMember = "Bank_Name";
            lblDate.Text = objCustomerPayment.PostDate;
        }

        private void txtCustCode_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter && txtCustCode.Text.Trim() != "")
            {
                objCustomerPayment.CustCode = txtCustCode.Text.ToString().Trim();
                objCustomerPayment.SqlStatement = "SELECT Cust_Code, Cust_Name FROM Customer WHERE Cust_Code = '" + txtCustCode.Text.Trim() + "'";
                objCustomerPayment.ReadCustomerDetails();
                if (objCustomerPayment.RecordFound == true)
                {
                    txtCustCode.Text = objCustomerPayment.CustCode;
                    txtCustName.Text = objCustomerPayment.CustName;

                    if (MessageBox.Show("Are You Sure You want to Load Customer Transaction ", "Receipt", MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.Yes)
                    {
                        objCustomerPayment.LoadCustomerTransaction();
                        objCustomerPayment.GetTempDataset();
                        //Refreshing DataGrid View
                        dataGridViewPendingPayments.DataSource = objCustomerPayment.GetPendingPayment.Tables["PendingPayments"];
                        dataGridViewPendingPayments.Refresh();
                        dataGridViewSelectedPayments.DataSource = objCustomerPayment.SelectedPayment.Tables["SelectedPayment"];
                        dataGridViewSelectedPayments.Refresh();
                        dataGridViewPayments.DataSource = objCustomerPayment.Payments.Tables["Payments"];
                        dataGridViewPayments.Refresh();

                        objCustomerPayment.SqlStatement = "select ISNULL(SUM(Balance_Amount), 0) PendingPayTotalAmt from tbPendingPayments WHERE Temp_DocNo = '" + lblTempDocNo.Text.Trim() + "' AND Loca = ";
                        objCustomerPayment.ReadPendingTotalAmounts();
                        lblTotalOutstanding.Text = objCustomerPayment.PendingPayTotalAmt.ToString();
                    }
                }
                else
                {
                    MessageBox.Show("Customer Code Not Found.", "Receipt", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    txtCustCode.Focus();
                }
            }
        }

        private void txtCustCode_Enter(object sender, EventArgs e)
        {
            if (search.Code != null && search.Code != "")
            {
                txtCustCode.Text = search.Code.Trim();
                txtCustName.Text = search.Descript.Trim();
            }
            search.Code = string.Empty;
            search.Descript = string.Empty;
        }

        private void btnSupplierSearch_Click(object sender, EventArgs e)
        {
            if (search.IsDisposed)
            {
                search = new frmSearch();
            }

            if (txtCustCode.Text.Trim() == string.Empty && txtCustName.Text.Trim() == string.Empty)
            {
                objCustomerPayment.SqlStatement = "SELECT Cust_Code AS [Customer Code],Cust_Name AS [Customer Name] FROM Customer";
            }
            else
            {
                if (txtCustCode.Text.Trim() != string.Empty && txtCustName.Text.Trim() == string.Empty)
                {
                    objCustomerPayment.SqlStatement = "SELECT Cust_Code AS [Customer Code],Cust_Name AS [Customer Name] FROM Customer WHERE Cust_Code LIKE '%" + txtCustCode.Text.Trim() + "%'";
                }
                else
                {
                    if (txtCustCode.Text.Trim() == string.Empty && txtCustName.Text.Trim() != string.Empty)
                    {
                        objCustomerPayment.SqlStatement = "SELECT Cust_Code AS [Customer Code],Cust_Name AS [Customer Name] FROM Customer WHERE Cust_Name LIKE '%" + txtCustName.Text.Trim() + "%'";
                    }
                    else
                    {
                        objCustomerPayment.SqlStatement = "SELECT Cust_Code AS [Customer Code],Cust_Name AS [Customer Name] FROM Customer";
                    }
                }
            }
            objCustomerPayment.DataetName = "dsCustomer";
            objCustomerPayment.GetCustomerDetails();
            search.dgSearch.DataSource = objCustomerPayment.GetCustomerDataset.Tables["dsCustomer"];
            search.prop_Focus = txtCustCode;
            search.Show();
        }

        private void dataGridViewPendingPayments_DoubleClick(object sender, EventArgs e)
        {
            if (dataGridViewPendingPayments.SelectedRows.Count <= 0 || dataGridViewPendingPayments.SelectedRows[0].Cells[0].ToString() == ""  )
            {
                MessageBox.Show("Select Data", "Select", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
            else
            {
                lblPendingDocNo.Text = dataGridViewPendingPayments.SelectedRows[0].Cells[0].Value.ToString();
                lblPendingDocumentDate.Text = dataGridViewPendingPayments.SelectedRows[0].Cells[1].Value.ToString();
                lblPendingDocumentAmount.Text = dataGridViewPendingPayments.SelectedRows[0].Cells[2].Value.ToString();
                txtPendingPaymentAmount.Text = dataGridViewPendingPayments.SelectedRows[0].Cells[3].Value.ToString();
                txtPendingPaymentAmount.Select(0, txtPendingPaymentAmount.Text.Trim().Length);
                decSelectAmount = decimal.Parse(dataGridViewPendingPayments.SelectedRows[0].Cells[3].Value.ToString());
                txtPendingPaymentAmount.Focus();
            }
        }

        private void dataGridViewPendingPayments_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter && lblPendingDocNo.Text.Trim() != string.Empty && clsValidation.isNumeric(txtPendingPaymentAmount.Text, System.Globalization.NumberStyles.Currency) == true && float.Parse(txtPendingPaymentAmount.Text) > 0 && float.Parse(txtPendingPaymentAmount.Text) <= float.Parse(lblPendingDocumentAmount.Text))
            {
                if (MessageBox.Show("Do You Want Add to Payment List ? ", "Customer Payment", MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.Yes)
                {
                    objCustomerPayment.TempDocNo = lblTempDocNo.Text.Trim();
                    objCustomerPayment.PendingDocNo = lblPendingDocNo.Text.Trim();
                    objCustomerPayment.PendingPayAmount = decimal.Parse(txtPendingPaymentAmount.Text.ToString());
                    objCustomerPayment.AddToPaymentList();
                    //Refreshing DataGrid View
                    objCustomerPayment.GetTempDataset();
                    dataGridViewSelectedPayments.DataSource = objCustomerPayment.SelectedPayment.Tables["SelectedPayment"];
                    dataGridViewSelectedPayments.Refresh();

                    objCustomerPayment.SqlStatement = "select ISNULL(SUM(Paid_Amount),0) SelTotalAmount from tbSelectedPayments WHERE Temp_DocNo = '" + lblTempDocNo.Text.Trim() + "' AND Loca = ";
                    objCustomerPayment.ReadSelTotalAmount();
                    lblTotalSelectedValue.Text = objCustomerPayment.SelTotalAmount.ToString();
                    txtPaymentModeAmount.Text = objCustomerPayment.SelTotalAmount.ToString();
                    lblBalance.Text = objCustomerPayment.SelTotalAmount.ToString();

                    lblPendingDocNo.Text = string.Empty;
                    lblPendingDocumentDate.Text = string.Empty;
                    lblPendingDocumentAmount.Text = string.Empty;
                    txtPendingPaymentAmount.Text = string.Empty;
                    txtCustCode.Enabled = false;
                    txtCustName.Enabled = false;
                    btnCustomerSearch.Enabled = false;
                }
            }
        }

        private void dataGridViewSelectedPayments_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.F2 && dataGridViewSelectedPayments.SelectedRows[0].Cells[0].Value.ToString() != string.Empty)
            {
                if (MessageBox.Show("Are You Sure You want to Remove From Payment List ?. ", "Supplier Payments", MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.Yes)
                {
                    objCustomerPayment.TempDocNo = lblTempDocNo.Text.Trim();
                    objCustomerPayment.PendingDocNo = dataGridViewSelectedPayments.SelectedRows[0].Cells[0].Value.ToString();
                    objCustomerPayment.PendingPayAmount = 0;
                    objCustomerPayment.DeleteFromPaymentList();

                    objCustomerPayment.GetTempDataset();
                    dataGridViewSelectedPayments.DataSource = objCustomerPayment.SelectedPayment.Tables["SelectedPayment"];
                    dataGridViewSelectedPayments.Refresh();

                    objCustomerPayment.SqlStatement = "select ISNULL(SUM(Paid_Amount),0) SelTotalAmount from tbSelectedPayments WHERE Iid = 'REC' AND Temp_DocNo = '" + lblTempDocNo.Text.Trim() + "' AND Loca = ";
                    objCustomerPayment.ReadSelTotalAmount();
                    lblTotalSelectedValue.Text = objCustomerPayment.SelTotalAmount.ToString();
                    txtPaymentModeAmount.Text = objCustomerPayment.SelTotalAmount.ToString();
                    lblBalance.Text = objCustomerPayment.SelTotalAmount.ToString();
                }
            }
        }

        private void cmbPaymentMode_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cmbPaymentMode.Text.Trim() == "CHEQUE")
            {
                cmbBankName.Enabled = true;
                txtChequeNo.Enabled = true;
                dtpChequeDate.Enabled = true;
                txtBranchName.Enabled = true;

            }
            else
            {
                cmbBankName.Text = string.Empty;
                txtChequeNo.Text = string.Empty;
                txtChequeNo.Text = string.Empty;
                dtpChequeDate.Enabled = false;

                cmbBankName.Enabled = false;
                txtChequeNo.Enabled = false;
                dtpChequeDate.Enabled = false;
                txtBranchName.Enabled = false;
            }
        }

        private void txtPaymentModeAmount_KeyDown(object sender, KeyEventArgs e)
        {
            // if (e.KeyCode == Keys.Enter && cmbPaymentMode.Text.Trim() != string.Empty && txtPaymentModeAmount.Text.Trim() != string.Empty && clsValidation.isNumeric(txtPaymentModeAmount.Text, System.Globalization.NumberStyles.Currency) == true && float.Parse(txtPaymentModeAmount.Text.ToString()) > 0 && float.Parse(txtPaymentModeAmount.Text.ToString()) <= float.Parse(lblTotalSelectedValue.Text.ToString()) && float.Parse(txtPaymentModeAmount.Text.ToString()) <= float.Parse(lblBalance.Text.ToString()))
            if (e.KeyCode == Keys.Enter && cmbPaymentMode.Text.Trim() != string.Empty && txtPaymentModeAmount.Text.Trim() != string.Empty && clsValidation.isNumeric(txtPaymentModeAmount.Text, System.Globalization.NumberStyles.Currency) == true && float.Parse(txtPaymentModeAmount.Text.ToString()) > 0 && float.Parse(txtPaymentModeAmount.Text.ToString()) <= float.Parse(lblTotalSelectedValue.Text.ToString()) && float.Parse(txtPaymentModeAmount.Text.ToString()) <= float.Parse(lblBalance.Text.ToString()))
            {
                if (MessageBox.Show("Do You Want Add to Payment Mode List ? ", "Receipt", MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.Yes)
                {
                    if (cmbPaymentMode.Text.Trim() == "CHEQUE" && cmbBankName.Text.Trim() != string.Empty && txtBranchName.Text.Trim() != string.Empty && txtChequeNo.Text.Trim() != string.Empty)
                    {
                        objCustomerPayment.TempDocNo = lblTempDocNo.Text.Trim();
                        objCustomerPayment.Pay_Type = cmbPaymentMode.Text.Trim();
                        objCustomerPayment.ChequeNo = txtChequeNo.Text.Trim();
                        objCustomerPayment.SelectBankName = cmbBankName.Text.Trim().ToUpper();
                        objCustomerPayment.BranchName = txtBranchName.Text.Trim().ToUpper();
                        objCustomerPayment.ChequeDate = dtpChequeDate.Text;
                        objCustomerPayment.Amount = decimal.Parse(txtPaymentModeAmount.Text.ToString());
                        objCustomerPayment.AddToPaymentMode();
                    }
                    else
                    {
                        if (cmbPaymentMode.Text.Trim() == "CASH")
                        {
                            objCustomerPayment.TempDocNo = lblTempDocNo.Text.Trim();
                            objCustomerPayment.Pay_Type = cmbPaymentMode.Text.Trim();
                            objCustomerPayment.ChequeNo = "";
                            objCustomerPayment.SelectBankName = "";
                            objCustomerPayment.BranchName = "";
                            objCustomerPayment.ChequeDate = "";
                            objCustomerPayment.Amount = decimal.Parse(txtPaymentModeAmount.Text.ToString());
                            objCustomerPayment.AddToPaymentMode();
                        }
                    }
                    objCustomerPayment.GetTempDataset();
                    dataGridViewPayments.DataSource = objCustomerPayment.Payments.Tables["Payments"];
                    dataGridViewPayments.Refresh();

                    objCustomerPayment.SqlStatement = "select ISNULL(SUM(Amount), 0) decTotalPayment from tbPaymentDetails WHERE Temp_DocNo = '" + lblTempDocNo.Text.Trim() + "' AND Loca = ";
                    objCustomerPayment.ReadTotalPayment();
                    lblTotalPayment.Text = objCustomerPayment.TotalPayment.ToString();
                    decBalanceAmount = decimal.Parse(lblTotalSelectedValue.Text.ToString()) - decimal.Parse(lblTotalPayment.Text.ToString());
                    lblBalance.Text = decBalanceAmount.ToString();
                    txtPaymentModeAmount.Text = decBalanceAmount.ToString();
                    cmbPaymentMode.Text = "";
                    //                    txtPaymentModeAmount.Text = "";
                    txtChequeNo.Text = "";
                    cmbBankName.Text = "";
                    txtBranchName.Text = "";
                    txtChequeNo.Enabled = false;
                    cmbBankName.Enabled = false;
                    txtBranchName.Enabled = false;

                    cmbPaymentMode.Focus();
                }
            }
        }

        private void cmbPaymentMode_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter && cmbPaymentMode.Text.Trim() != string.Empty && cmbPaymentMode.Text.Trim() == "CASH")
            {
                txtPaymentModeAmount.Focus();
            }
            else
            {
                if (e.KeyCode == Keys.Enter && cmbPaymentMode.Text.Trim() != string.Empty && cmbPaymentMode.Text.Trim() == "CHEQUE")
                {
                    cmbBankName.Focus();
                }
            }
        }

        private void cmbBankName_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter && cmbBankName.Text.Trim() != string.Empty)
            {
                txtBranchName.Focus();
            }
        }

        private void txtBranchName_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter && txtBranchName.Text.Trim() != string.Empty)
            {
                txtChequeNo.Focus();
            }
        }

        private void txtChequeNo_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter && txtChequeNo.Text.Trim() != string.Empty)
            {
                dtpChequeDate.Focus();
            }
        }

        private void dtpChequeDate_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                txtPaymentModeAmount.Focus();
            }
        }

        private void txtPendingPaymentAmount_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter && lblPendingDocNo.Text.Trim() != string.Empty && clsValidation.isNumeric(txtPendingPaymentAmount.Text, System.Globalization.NumberStyles.Currency) == true && float.Parse(txtPendingPaymentAmount.Text) > 0 && float.Parse(txtPendingPaymentAmount.Text) <= float.Parse(lblPendingDocumentAmount.Text))
            {
                if (MessageBox.Show("Do You Want Add to Payment List ? ", "Receipt", MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.Yes)
                {
                    if (decSelectAmount < decimal.Parse(txtPendingPaymentAmount.Text.ToString()))
                    {
                        MessageBox.Show("Invalid Amount. Please Enter Valid Amount. ", "Receipt", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        txtPendingPaymentAmount.Text  =  decSelectAmount.ToString();
                        return ;
                    }
                    objCustomerPayment.TempDocNo = lblTempDocNo.Text.Trim();
                    objCustomerPayment.PendingDocNo = lblPendingDocNo.Text.Trim();
                    objCustomerPayment.PendingPayAmount = decimal.Parse(txtPendingPaymentAmount.Text.ToString());
                    objCustomerPayment.AddToPaymentList();
                    //Refreshing DataGrid View
                    objCustomerPayment.GetTempDataset();
                    dataGridViewSelectedPayments.DataSource = objCustomerPayment.SelectedPayment.Tables["SelectedPayment"];
                    dataGridViewSelectedPayments.Refresh();

                    objCustomerPayment.SqlStatement = "select ISNULL(SUM(Paid_Amount),0) SelTotalAmount from tbSelectedPayments WHERE Iid = 'REC' AND Temp_DocNo = '" + lblTempDocNo.Text.Trim() + "' AND Loca = ";
                    objCustomerPayment.ReadSelTotalAmount();
                    lblTotalSelectedValue.Text = objCustomerPayment.SelTotalAmount.ToString();
                    txtPaymentModeAmount.Text = objCustomerPayment.SelTotalAmount.ToString();
                    lblBalance.Text = objCustomerPayment.SelTotalAmount.ToString();

                    lblPendingDocNo.Text = string.Empty;
                    lblPendingDocumentDate.Text = string.Empty;
                    lblPendingDocumentAmount.Text = string.Empty;
                    txtPendingPaymentAmount.Text = string.Empty;
                    txtCustCode.Enabled = false;
                    txtCustName.Enabled = false;
                    btnCustomerSearch.Enabled = false;
                }
            }
        }

        private void btnApply_Click(object sender, EventArgs e)
        {
            objCustomerPayment.SqlStatement = "SELECT * from tbPendingPayments WHERE tbPendingPayments.IId = 'REC' AND tbPendingPayments.Temp_DocNo = '" + lblTempDocNo.Text.ToString() + "' AND tbPendingPayments.Loca = " + LoginManager.LocaCode;
            objCustomerPayment.ReadTempTransDetails();
            if (objCustomerPayment.RecordFound != true)
            {
                MessageBox.Show("Pending Payment Details Not Found.", "Receipt", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            objCustomerPayment.SqlStatement = "SELECT * from tbSelectedPayments WHERE tbSelectedPayments.IId = 'REC' AND tbSelectedPayments.Temp_DocNo = '" + lblTempDocNo.Text.ToString() + "' AND tbSelectedPayments.Loca = " + LoginManager.LocaCode;
            objCustomerPayment.ReadTempTransDetails();
            if (objCustomerPayment.RecordFound != true)
            {
                MessageBox.Show("Selected Payment Details Not Found.", "Receipt", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            objCustomerPayment.SqlStatement = "SELECT * from tbPaymentDetails WHERE tbPaymentDetails.IId = 'REC' AND tbPaymentDetails.Temp_DocNo = '" + lblTempDocNo.Text.ToString() + "' AND tbPaymentDetails.Loca = " + LoginManager.LocaCode;
            objCustomerPayment.ReadTempTransDetails();
            if (objCustomerPayment.RecordFound != true)
            {
                MessageBox.Show("Selected Payment Mode Details Not Found.", "Receipt", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            //Payment Apply
            if (MessageBox.Show("Are You Sure You want to Apply This Receipt. ", "Receipt", MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.Yes)
            {
                DataSet dsDataForReport = new DataSet();
                DataSet dsDataForSubReport = new DataSet();

                frmReportViewer objRepViewer = new frmReportViewer();

                objCustomerPayment.CustomerPaymentApply();
                MessageBox.Show("Receipt Successfully Applied as Document No. " + objCustomerPayment.OrgDocNo, "Receipt", MessageBoxButtons.OK, MessageBoxIcon.Information);

                objCustomerPayment.GetDataSetForReport();
                dsDataForReport = objCustomerPayment.GetReportDataset;
                dsDataForSubReport = objCustomerPayment.GetSubReportDataset;

                rptCustomerPayment rptReceipt = new rptCustomerPayment();

                rptReceipt.SetDataSource(dsDataForReport);
                rptReceipt.OpenSubreport("rptSupplierPaymentMode").SetDataSource(dsDataForSubReport);
                objRepViewer.crystalReportViewer1.ReportSource = rptReceipt;
                objRepViewer.WindowState = FormWindowState.Maximized;
                objRepViewer.Show();

                this.Close();
                this.Dispose();
                CustomerPayment = null;
            }
        }

    }
}