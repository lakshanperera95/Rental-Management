using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using clsLibrary;
namespace Inventory
{
    public partial class frmSupplierReturn : Form
    {
        private decimal decDiscountAmount;
        private decimal decAmount;

        private string strDisc;

        private int intPosOfPerc;   // find Percentage mark on percentage
        private float fltDiscPer;

        clsSupplierReturn objSupplierReturn = new clsSupplierReturn();

        private static frmSupplierReturn SupplierReturn;

        private frmSearch search = new frmSearch();

        public frmSupplierReturn()
        {
            InitializeComponent();
        }

        public static frmSupplierReturn GetSupplierReturn
        {
            get
            {
                return SupplierReturn;
            }
            set
            {
                SupplierReturn = value;
            }
        }

        private void frmSupplierReturn_Load(object sender, EventArgs e)
        {
            objSupplierReturn.SqlStatement = "SELECT Temp_Prn FROM DocumentNoDetails WHERE Loca = ";
            objSupplierReturn.GetTempDocumentNo();
            lblTempDocNo.Text = objSupplierReturn.TempDocNo;
            dataGridTempGRN.DataSource = objSupplierReturn.TempGrn;
            dataGridTempGRN.Refresh();
        }

        private void btnClose_Click(object sender, EventArgs e)
        {
            this.Close();
            this.Dispose();
            SupplierReturn = null;
        }

        private void frmSupplierReturn_FormClosed(object sender, FormClosedEventArgs e)
        {
            SupplierReturn = null;
        }

        private void frmSupplierReturn_FormClosing(object sender, FormClosingEventArgs e)
        {
            // Hide the form...
            this.Hide();

            // Cancel the close...
            e.Cancel = true;
        }

        private void btnSupplierSearch_Click(object sender, EventArgs e)
        {
            if (search.IsDisposed)
            {
                search = new frmSearch();
            }

            if (txtSuppCode.Text.Trim() == string.Empty && txtSuppName.Text.Trim() == string.Empty)
            {
                objSupplierReturn.SqlStatement = "SELECT Supp_Code AS [Supplier Code],Supp_Name AS [Supplier Name] FROM Supplier";
            }
            else
            {
                if (txtSuppCode.Text.Trim() != string.Empty && txtSuppName.Text.Trim() == string.Empty)
                {
                    objSupplierReturn.SqlStatement = "SELECT Supp_Code AS [Supplier Code],Supp_Name AS [Supplier Name] FROM Supplier WHERE Supp_Code LIKE '%" + txtSuppCode.Text.Trim() + "%'";
                }
                else
                {
                    if (txtSuppCode.Text.Trim() == string.Empty && txtSuppName.Text.Trim() != string.Empty)
                    {
                        objSupplierReturn.SqlStatement = "SELECT Supp_Code AS [Supplier Code],Supp_Name AS [Supplier Name] FROM Supplier WHERE Supp_Name LIKE '%" + txtSuppName.Text.Trim() + "%'";
                    }
                }
            }
            objSupplierReturn.DataetName = "dsSupplier";
            objSupplierReturn.GetSupplierDetails();
            search.dgSearch.DataSource = objSupplierReturn.GetSupplierDataset.Tables["dsSupplier"];
            search.prop_Focus = txtSuppCode;
            search.Show();
        }

        private void txtSuppCode_Enter(object sender, EventArgs e)
        {
            if (search.Code != null && search.Code != "")
            {
                txtSuppCode.Text = search.Code.Trim();
                txtSuppName.Text = search.Descript.Trim();
            }
            search.Code = string.Empty;
            search.Descript = string.Empty;
        }

        private void txtSuppCode_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter && txtSuppCode.Text.Trim() != "")
            {
                objSupplierReturn.SuppCode = txtSuppCode.Text.ToString().Trim();
                objSupplierReturn.SqlStatement = "SELECT Supp_Code, Supp_Name FROM supplier WHERE Supp_Code = '" + txtSuppCode.Text.Trim() + "'";
                objSupplierReturn.ReadSupplierDetails();
                if (objSupplierReturn.RecordFound == true)
                {
                    txtSuppCode.Text = objSupplierReturn.SuppCode;
                    txtSuppName.Text = objSupplierReturn.SuppName;
                    txtSuppName.Focus();
                }
                else
                {
                    MessageBox.Show("Supplier Code Not Found.", "Goods Received Note", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    txtSuppCode.Focus();
                }
            }
        }

        private void txtSuppName_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter && txtSuppName.Text.Trim() != "")
            {
                txtReference.Focus();
            }
        }

        private void btnSaveDocSearch_Click(object sender, EventArgs e)
        {
            if (search.IsDisposed)
            {
                search = new frmSearch();
            }

            objSupplierReturn.SqlStatement = "SELECT Doc_No [Document No], Post_Date + '  ' + Supplier.Supp_Name [Supplier] FROM Transaction_Save_Header INNER JOIN supplier on Transaction_Save_Header.Supplier_Id = supplier.supp_code WHERE Iid = 'SRN' AND Transaction_Save_Header.Loca = '" + LoginManager.LocaCode + "' ORDER BY RIGHT(Doc_No,6) DESC";
            objSupplierReturn.DataetName = "Table";
            objSupplierReturn.GetItemDetails();

            search.dgSearch.DataSource = objSupplierReturn.GetItemDataset.Tables["Table"];
            search.Show();

            search.prop_Focus = lblTempDocNo;
        }

        private void lblGrnNumber_Enter(object sender, EventArgs e)
        {
            if (search.Code != null && search.Code != "")
            {
                if (MessageBox.Show("Are You Sure You want to Return Grn No :" + search.Code.Trim() + ". ", "Supplier Return", MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.Yes)
                {
                    objSupplierReturn.GrnNo = search.Code.Trim();
                    objSupplierReturn.SqlStatement = "SELECT Transaction_Header.*, Supplier.Supp_Name, Payment_Summary.Balance_Amount FROM Transaction_Header INNER JOIN Payment_Summary ON Payment_Summary.Doc_No = Transaction_Header.Doc_No AND Payment_Summary.Tr_Type = Transaction_Header.Iid AND Payment_Summary.Loca = Transaction_Header.Loca AND Payment_Summary.Acc_No = Transaction_Header.Supplier_Id INNER JOIN Supplier ON Supplier.Supp_code = Transaction_Header.Supplier_Id WHERE iid = 'GRN' AND Transaction_Header.Doc_No = '" + search.Code.Trim() + "' AND Transaction_Header.Loca = ";
                    objSupplierReturn.ReadGrnDetail();
                    if (objSupplierReturn.RecordFound)
                    {
                        txtSuppCode.Text = objSupplierReturn.SuppCode.ToString();
                        txtSuppName.Text = objSupplierReturn.SuppName.ToString();
                        lblGRNAmount.Text = objSupplierReturn.GrnAmount.ToString();
                        txtSuppCode.Enabled = false;
                        txtSuppName.Enabled = false;
                        btnGrnSearch.Enabled = false;
                        btnSaveDocSearch.Enabled = false;
                        btnSupplierSearch.Enabled = false;
                        txtReference.Focus();
                    }
                    else
                    {
                        txtSuppCode.Text = string.Empty;
                        txtSuppName.Text = string.Empty;
                        lblGRNAmount.Text = "0";
                    }
                }
            }
            search.Code = string.Empty;
            search.Descript = string.Empty;
        }

        private void btnGrnSearch_Click(object sender, EventArgs e)
        {
            if (search.IsDisposed)
            {
                search = new frmSearch();
            }

            if (txtSuppCode.Text.Trim() != string.Empty)
            {
                objSupplierReturn.SqlStatement = "SELECT Doc_No [Document No], Transaction_Date + ' ' +  Supplier.Supp_Name [Supplier] FROM  Payment_Summary INNER JOIN Supplier ON Payment_Summary.Acc_No = Supplier.Supp_Code WHERE Acc_No = '" + txtSuppCode.Text.Trim() + "' AND Tr_Type = 'GRN' AND Payment_Summary.Loca = '" + LoginManager.LocaCode + "' AND Balance_Amount > 0 ORDER BY RIGHT(Doc_No,6) DESC";
            }
            else
            {
                objSupplierReturn.SqlStatement = "SELECT Doc_No [Document No], Transaction_Date + ' ' +  Supplier.Supp_Name [Supplier] FROM  Payment_Summary INNER JOIN Supplier ON Payment_Summary.Acc_No = Supplier.Supp_Code WHERE Tr_Type = 'GRN' AND Payment_Summary.Loca = '" + LoginManager.LocaCode + "' AND Balance_Amount > 0 ORDER BY RIGHT(Doc_No,6) DESC";
            }
            objSupplierReturn.DataetName = "Table";
            objSupplierReturn.GetItemDetails();

            search.dgSearch.DataSource = objSupplierReturn.GetItemDataset.Tables["Table"];
            search.Show();

            search.prop_Focus = lblGrnNumber;
        }

        private void txtReference_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter && txtReference.Text.Trim() != string.Empty)
            {
                txtRemarks.Focus();
            }
            else
            {
                if (e.KeyCode == Keys.Enter && txtReference.Text.Trim() == string.Empty)
                {
                    txtReference.Text = ".";
                    txtRemarks.Focus();
                }
            }
        }

        private void txtRemarks_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter && txtRemarks.Text.Trim() != string.Empty)
            {
                txtProductCode.Focus();
            }
            else
            {
                if (e.KeyCode == Keys.Enter && txtRemarks.Text.Trim() == string.Empty)
                {
                    txtRemarks.Text = ".";
                    txtProductCode.Focus();
                }
            }
        }

        private void txtProductCode_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                objSupplierReturn.SuppCode = txtSuppCode.Text.ToString().Trim();
                objSupplierReturn.SqlStatement = "SELECT Supp_Code, Supp_Name FROM supplier WHERE Supp_Code = '" + txtSuppCode.Text.Trim() + "'";
                objSupplierReturn.ReadSupplierDetails();
                if (objSupplierReturn.RecordFound == true)
                {
                    txtSuppCode.Text = objSupplierReturn.SuppCode;
                    txtSuppName.Text = objSupplierReturn.SuppName;
                }
                else
                {
                    MessageBox.Show("Supplier Code Not Found.", "Goods Received Note", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    txtSuppCode.Focus();
                }
                txtProductCode.Text = txtProductCode.Text.ToUpper();
                objSupplierReturn.SqlStatement = "SELECT product.Prod_Code, product.Prod_Name, product.Purchase_price, product.Selling_Price, Stock_Master.Qty, product.Pack_Size, product.Unit FROM product INNER JOIN Stock_Master ON product.Prod_Code = Stock_Master.Prod_Code WHERE product.Supplier_Id = '" + txtSuppCode.Text.Trim() + "' AND product.Prod_Code = '" + txtProductCode.Text.Trim() + "' and Stock_Master.Loca = ";
                objSupplierReturn.ReadProductDetails();
                if (objSupplierReturn.RecordFound == true)
                {
                    txtProductName.Text = objSupplierReturn.ProductName;
                    txtPurchasePrice.Text = (string)objSupplierReturn.PurchasePrice.ToString();
                    txtSellingPrice.Text = (string)objSupplierReturn.SellingPrice.ToString();
                    lblCurrentQty.Text = (string)objSupplierReturn.CurrentQty.ToString();
                    txtFreeQty.Text = "0";
                    txtDiscount.Text = "0";
                    objSupplierReturn.SqlStatement = "SELECT qty FROM TransactionTemp_Details WHERE Prod_Code = '" + objSupplierReturn.ProductCode + "' AND Doc_No = '" + objSupplierReturn.TempDocNo + "' AND IId = 'SRN' AND Loca = ";
                    objSupplierReturn.ReadExsistProductDetails();
                    txtQty.Text = (string)objSupplierReturn.Qty.ToString();
                    txtQty.Select(0, txtQty.Text.Trim().Length);
                    txtQty.Focus();
                }
                else
                {
                    MessageBox.Show("Product Code Not Found. Please Check Product Code.", "Supplier Return Note", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            }
        }

        private void txtProductCode_Enter(object sender, EventArgs e)
        {
            if (search.Code != null && search.Code != "")
            {
                txtProductCode.Text = search.Code.Trim();
                txtProductName.Text = search.Descript.Trim();
            }
            search.Code = string.Empty;
            search.Descript = string.Empty;
        }

        private void btnItemSearch_Click(object sender, EventArgs e)
        {
            if (search.IsDisposed)
            {
                search = new frmSearch();
            }

            if (txtProductCode.Text.Trim() != string.Empty && txtProductName.Text.Trim() == string.Empty)
            {
                objSupplierReturn.SqlStatement = "SELECT Prod_Code AS [Product Code],Prod_Name AS [Product Name] FROM Product WHERE Supplier_Id = '" + txtSuppCode.Text.Trim() + "' AND Prod_Code LIKE '%" + txtProductCode.Text.Trim() + "%'";
            }
            else
            {
                if (txtProductCode.Text.Trim() == string.Empty && txtProductName.Text.Trim() != string.Empty)
                {
                    objSupplierReturn.SqlStatement = "SELECT Prod_Code AS [Product Code],Prod_Name AS [Product Name] FROM Product WHERE Supplier_Id = '" + txtSuppCode.Text.Trim() + "' AND Prod_Name LIKE '%" + txtProductName.Text.Trim() + "%'";
                }
                else
                {
                    objSupplierReturn.SqlStatement = "SELECT Prod_Code AS [Product Code],Prod_Name AS [Product Name] FROM Product WHERE Supplier_Id = '" + txtSuppCode.Text.Trim() + "'";
                }
            }

            objSupplierReturn.DataetName = "dsProduct";
            objSupplierReturn.GetItemDetails();

            search.dgSearch.DataSource = objSupplierReturn.GetItemDataset.Tables["dsProduct"];
            search.prop_Focus = txtProductCode;
            search.Show();

        }

        private void txtProductName_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter && txtProductName.Text.Trim() != String.Empty)
            {
                txtQty.Focus();
            }
        }

        private void txtQty_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter && clsValidation.isNumeric(txtQty.Text, System.Globalization.NumberStyles.Float) == true && float.Parse(txtQty.Text) > 0)
            {
                decAmount = decimal.Parse(txtPurchasePrice.Text.ToString()) * decimal.Parse(txtQty.Text.ToString());
                lblAmount.Text = decAmount.ToString();
                txtFreeQty.Focus();
            }
        }

        private void txtFreeQty_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter && clsValidation.isNumeric(txtFreeQty.Text, System.Globalization.NumberStyles.Float) == true && float.Parse(txtFreeQty.Text) >= 0)
            {
                txtDiscount.Focus();
            }
        }

        private void CalculateDiscount(string strDiscText)
        {
            if (strDiscText.IndexOf("%") > 0 && strDiscText.IndexOf("%") < 3)
            {
                strDisc = strDiscText;
                intPosOfPerc = strDiscText.IndexOf("%");
                fltDiscPer = float.Parse(strDiscText.Substring(0, intPosOfPerc).ToString());
                decAmount = decimal.Parse(txtPurchasePrice.Text.ToString()) * decimal.Parse(txtQty.Text.ToString());
                fltDiscPer = 100 - fltDiscPer;
                decAmount = (decimal.Parse(decAmount.ToString()) * decimal.Parse(fltDiscPer.ToString())) / 100;
                decDiscountAmount = decimal.Parse(lblAmount.Text) - decAmount;
                txtDiscount.Text = decDiscountAmount.ToString();
                lblAmount.Text = decAmount.ToString();
            }
            else
            {
                MessageBox.Show("Invalid Discount. Please Enter Valid Discount(Ex: 22% or 225.00)", "Goods Received Note", MessageBoxButtons.OK, MessageBoxIcon.Information);
                txtDiscount.Focus();
            }
        }

        private void CalculateDiscountAmount(decimal decDiscText)
        {
            if (decDiscText <= decimal.Parse(lblAmount.Text.ToString()))
            {
                decAmount = decimal.Parse(txtPurchasePrice.Text.ToString()) * decimal.Parse(txtQty.Text.ToString());
                decAmount = decAmount - decDiscText;
                decDiscountAmount = decDiscText;
                txtDiscount.Text = decDiscountAmount.ToString();
                lblAmount.Text = decAmount.ToString();
            }
            else
            {
                MessageBox.Show("Invalid Discount. Please Enter Valid Discount(Ex: 22% or 225.00)", "Goods Received Note", MessageBoxButtons.OK, MessageBoxIcon.Information);
                txtDiscount.Focus();
            }
        }

        //calculating subtotal discount
        private void CalculateSubTotalDiscount(string strDiscText)
        {
            if (strDiscText.IndexOf("%") > 0 && strDiscText.IndexOf("%") < 3)
            {
                strDisc = strDiscText;
                intPosOfPerc = strDiscText.IndexOf("%");
                fltDiscPer = float.Parse(strDiscText.Substring(0, intPosOfPerc).ToString());
                decAmount = decimal.Parse(lblTotalAmount.Text.ToString());
                fltDiscPer = 100 - fltDiscPer;
                decAmount = (decimal.Parse(decAmount.ToString()) * decimal.Parse(fltDiscPer.ToString())) / 100;
                decDiscountAmount = decimal.Parse(lblTotalAmount.Text) - decAmount;
                txtSubDiscount.Text = string.Format("{0:0.00}", decDiscountAmount);
                lblSubTotal.Text = string.Format("{0:0.00}", decAmount);
                txtTaxAmount.Text = "0";
                lblNetAmount.Text = string.Format("{0:0.00}", decAmount);
            }
            else
            {
                MessageBox.Show("Invalid Discount. Please Enter Valid Discount(Ex: 22%)", "Goods Received Note", MessageBoxButtons.OK, MessageBoxIcon.Information);
                txtSubDiscPer.Select(0, txtSubDiscPer.Text.Trim().Length);

            }
        }

        private void CalculateSubTotalDiscountAmount(decimal decDiscText)
        {
            if (decDiscText <= decimal.Parse(lblTotalAmount.Text.ToString()))
            {
                decAmount = decimal.Parse(lblTotalAmount.Text.ToString());
                decAmount = decAmount - decDiscText;
                decDiscountAmount = decDiscText;
                //txtSubDiscount.Text = decDiscountAmount.ToString();
                txtSubDiscount.Text = string.Format("{0:0.00}", decDiscountAmount);
                lblSubTotal.Text = string.Format("{0:0.00}", decAmount);
                txtTaxAmount.Text = "0";
                lblNetAmount.Text = string.Format("{0:0.00}", decAmount);
                txtSubDiscPer.Text = string.Empty;
            }
            else
            {
                MessageBox.Show("Invalid Discount. Please Enter Valid Discount(Ex: 225.00)", "Goods Received Note", MessageBoxButtons.OK, MessageBoxIcon.Information);
                txtSubDiscount.Text = "0";
                txtSubDiscount.Select(0, txtSubDiscount.Text.Trim().Length);
            }
        }

        //Tax Calculation
        private void CalculateTax(string strTaxText)
        {
            if (strTaxText.IndexOf("%") > 0 && strTaxText.IndexOf("%") < 3)
            {
                strDisc = strTaxText;
                intPosOfPerc = strTaxText.IndexOf("%");
                fltDiscPer = float.Parse(strTaxText.Substring(0, intPosOfPerc).ToString());
                decAmount = decimal.Parse(lblSubTotal.Text.ToString());
                fltDiscPer = 100 + fltDiscPer;
                decAmount = (decimal.Parse(decAmount.ToString()) * decimal.Parse(fltDiscPer.ToString())) / 100;
                decDiscountAmount = decAmount - decimal.Parse(lblSubTotal.Text);
                txtTaxAmount.Text = string.Format("{0:0.00}", decDiscountAmount);
                lblNetAmount.Text = string.Format("{0:0.00}", decAmount);
            }
            else
            {
                MessageBox.Show("Invalid Tax Percentage. Please Enter Valid Percentage(Ex: 22% )", "Goods Received Note", MessageBoxButtons.OK, MessageBoxIcon.Information);
                txtTaxAmount.Focus();
            }
        }

        private void txtDiscount_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter && txtDiscount.Text.Trim() != string.Empty)
            {
                txtProductCode.Text = txtProductCode.Text.ToUpper();
                objSupplierReturn.SqlStatement = "SELECT product.Prod_Code, product.Prod_Name, product.Purchase_price, product.Selling_Price, Stock_Master.Qty, product.Pack_Size, product.Unit FROM product INNER JOIN Stock_Master ON product.Prod_Code = Stock_Master.Prod_Code WHERE product.Supplier_Id = '" + txtSuppCode.Text.Trim() + "' AND product.Prod_Code = '" + txtProductCode.Text.Trim() + "' and Stock_Master.Loca = ";
                objSupplierReturn.ReadProductDetails();
                if (objSupplierReturn.RecordFound == true)
                {
                    txtProductName.Text = objSupplierReturn.ProductName;
                    txtPurchasePrice.Text = (string)objSupplierReturn.PurchasePrice.ToString();
                    txtSellingPrice.Text = (string)objSupplierReturn.SellingPrice.ToString();
                }
                else
                {
                    MessageBox.Show("Product Code Not Found. Please Check Product Code.", "Goods Received Note", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    txtProductCode.Focus();
                    return;
                }

                strDisc = string.Empty;

                if (clsValidation.isNumeric(txtDiscount.Text, System.Globalization.NumberStyles.Currency) == false)
                {
                    CalculateDiscount(txtDiscount.Text.Trim());
                }
                else
                {
                    CalculateDiscountAmount(decimal.Parse(txtDiscount.Text.Trim()));
                }

                //Check For Invoice Value and Return Value If Select Invoice is Select
                decAmount = decimal.Parse(lblNetAmount.Text.ToString()) + decimal.Parse(lblAmount.Text.ToString());
                if (lblGrnNumber.Text.Trim() != string.Empty && decAmount > decimal.Parse(lblGRNAmount.Text.ToString()))
                {
                    MessageBox.Show("Return Value Greater Than Selected Good Received Note Value. Please Enter Correct Return Value.", "Supplier Return", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    txtQty.Select(0, txtQty.Text.Trim().Length);
                    txtQty.Focus();
                    return;
                }
                //***********

                objSupplierReturn.ProductCode = txtProductCode.Text.Trim();
                objSupplierReturn.ProductName = txtProductName.Text.Trim();
                lblCurrentQty.Text = objSupplierReturn.CurrentQty.ToString();
                objSupplierReturn.Qty = float.Parse(txtQty.Text.ToString());
                objSupplierReturn.FreeQty = float.Parse(txtFreeQty.Text.ToString());
                objSupplierReturn.Disc = strDisc;
                objSupplierReturn.Discount = decimal.Parse(txtDiscount.Text.ToString());
                //objSupplierReturn.Amount = (decimal.Parse(txtQty.Text.ToString()) * objSupplierReturn.SellingPrice) - decimal.Parse(txtDiscount.Text.ToString());
                objSupplierReturn.Amount = decimal.Parse(lblAmount.Text.ToString());
                objSupplierReturn.UpdateSrnTempDataSet();
                objSupplierReturn.GetTempDataset();
                dataGridTempGRN.DataSource = objSupplierReturn.TempGrn.Tables["GoodReceivedNote"];
                dataGridTempGRN.Refresh();
                txtProductCode.Text = string.Empty;
                txtProductName.Text = string.Empty;
                txtQty.Text = string.Empty;
                lblCurrentQty.Text = string.Empty;
                txtPurchasePrice.Text = string.Empty;
                txtSellingPrice.Text = string.Empty;
                txtDiscount.Text = "0";
                txtQty.Text = "0";
                txtFreeQty.Text = "0";

                lblAmount.Text = string.Empty;
                objSupplierReturn.Disc = string.Empty;
                txtReference.Enabled = false;
                txtRemarks.Enabled = false;

                objSupplierReturn.GetTotalValues();

                lblTotalQty.Text = string.Format("{0:0.00}", objSupplierReturn.TotalQty);
                lblTotalAmount.Text = string.Format("{0:0.00}", objSupplierReturn.TotalAmount);

                txtSubDiscount.Text = "0";
                txtSubDiscPer.Text = string.Empty;
                txtTaxAmount.Text = "0";
                lblSubTotal.Text = string.Format("{0:0.00}", objSupplierReturn.TotalAmount);
                lblNetAmount.Text = string.Format("{0:0.00}", objSupplierReturn.TotalAmount);
                txtSuppCode.Enabled = false;
                txtSuppName.Enabled = false;
                dtpDate.Enabled = false;
                txtReference.Enabled = false;
                txtRemarks.Enabled = false;
                txtSubDiscPer.Enabled = true;
                txtSubDiscount.Enabled = true;
                txtTaxAmount.Enabled = true;
                txtProductCode.Focus();
            }
        }

        private void dataGridTempGRN_DoubleClick(object sender, EventArgs e)
        {
            if (dataGridTempGRN.SelectedRows.Count <= 0 || dataGridTempGRN.SelectedRows[0].Cells[0].ToString() == ""  )
            {
                MessageBox.Show("Select Data", "Select", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
            else
            {
                txtProductCode.Text = dataGridTempGRN.SelectedRows[0].Cells[0].Value.ToString();
                txtProductName.Text = dataGridTempGRN.SelectedRows[0].Cells[1].Value.ToString();
                objSupplierReturn.SqlStatement = "SELECT product.Prod_Code, product.Prod_Name, product.Purchase_price, product.Selling_Price, Stock_Master.Qty, product.Pack_Size, product.Unit FROM product INNER JOIN Stock_Master ON product.Prod_Code = Stock_Master.Prod_Code WHERE product.Prod_Code = '" + txtProductCode.Text.Trim() + "' and Stock_Master.Loca = ";
                objSupplierReturn.ReadProductDetails();
                txtPurchasePrice.Text = dataGridTempGRN.SelectedRows[0].Cells[3].Value.ToString();
                txtSellingPrice.Text = dataGridTempGRN.SelectedRows[0].Cells[4].Value.ToString();
                txtQty.Text = dataGridTempGRN.SelectedRows[0].Cells[5].Value.ToString();
                txtFreeQty.Text = dataGridTempGRN.SelectedRows[0].Cells[6].Value.ToString();
                txtDiscount.Text = dataGridTempGRN.SelectedRows[0].Cells[7].Value.ToString();
                lblAmount.Text = dataGridTempGRN.SelectedRows[0].Cells[8].Value.ToString();
                txtQty.Focus();
            }
        }

        private void dataGridTempGRN_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.F2 && dataGridTempGRN.SelectedRows[0].Cells[0].Value.ToString() != string.Empty)
            {
                if (MessageBox.Show("Are You Sure You want to Delete This Item. ", "Goods Received Note", MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.Yes)
                {
                    objSupplierReturn.TempDocNo = lblTempDocNo.Text.Trim();
                    objSupplierReturn.ProductCode = dataGridTempGRN.SelectedRows[0].Cells[0].Value.ToString();
                    objSupplierReturn.DeleteProductDetaile();
                    objSupplierReturn.GetTempDataset();
                    dataGridTempGRN.DataSource = objSupplierReturn.TempGrn.Tables["GoodReceivedNote"];
                    dataGridTempGRN.Refresh();

                    objSupplierReturn.GetTotalValues();

                    lblTotalQty.Text = objSupplierReturn.TotalQty.ToString();
                    lblTotalAmount.Text = objSupplierReturn.TotalAmount.ToString();

                    objSupplierReturn.GetTotalValues();

                    lblTotalQty.Text = string.Format("{0:0.00}", objSupplierReturn.TotalQty);
                    lblTotalAmount.Text = string.Format("{0:0.00}", objSupplierReturn.TotalAmount);

                    txtSubDiscount.Text = "0";
                    txtSubDiscPer.Text = string.Empty;
                    txtTaxAmount.Text = "0";
                    lblSubTotal.Text = string.Format("{0:0.00}", objSupplierReturn.TotalAmount);
                    lblNetAmount.Text = string.Format("{0:0.00}", objSupplierReturn.TotalAmount);

                    txtProductCode.Focus();
                }
            }
        }

        private void btnPreview_Click(object sender, EventArgs e)
        {
            DataSet dsDataForReport = new DataSet();
            frmReportViewer objRepViewer = new frmReportViewer();

            objSupplierReturn.SqlStatement = "SELECT TransactionTemp_Details.* from TransactionTemp_Details WHERE TransactionTemp_Details.IId = 'SRN' AND TransactionTemp_Details.Doc_No = '" + lblTempDocNo.Text.ToString() + "' AND TransactionTemp_Details.Loca = " + LoginManager.LocaCode;
            objSupplierReturn.ReadTempTransDetails();
            if (objSupplierReturn.RecordFound != true)
            {
                MessageBox.Show("Supplier Return Note Details Not Found.", "Supplier Return Note Preview", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            objSupplierReturn.Reference = txtReference.Text.Trim();
            objSupplierReturn.GrnNo = lblGrnNumber.Text.Trim();
            objSupplierReturn.Reference = txtReference.Text.Trim();
            objSupplierReturn.Remark = txtRemarks.Text.Trim();
            objSupplierReturn.GrossAmount = decimal.Parse(lblTotalAmount.Text.ToString());
            objSupplierReturn.Disc = txtSubDiscPer.Text.Trim();
            objSupplierReturn.Discount = decimal.Parse(txtSubDiscount.Text.ToString());
            objSupplierReturn.Tax = decimal.Parse(txtTaxAmount.Text.ToString());
            objSupplierReturn.Amount  = decimal.Parse(lblNetAmount.Text.ToString());

            objSupplierReturn.GetDataSetForPreview();
            dsDataForReport = objSupplierReturn.GetReportDataset;
            rptSupplierReturnNote rptSrn = new rptSupplierReturnNote();
            rptSrn.SetDataSource(dsDataForReport);

            objRepViewer.crystalReportViewer1.ReportSource = rptSrn;
            objRepViewer.WindowState = FormWindowState.Maximized;
            objRepViewer.Show();
        }

        private void txtSubDiscPer_KeyDown(object sender, KeyEventArgs e)
        {
            strDisc = string.Empty;
            if (e.KeyCode == Keys.Enter && txtSubDiscPer.Text.Trim() != string.Empty)
            {
                if (clsValidation.isNumeric(txtSubDiscPer.Text, System.Globalization.NumberStyles.Currency) == false)
                {
                    CalculateSubTotalDiscount(txtSubDiscPer.Text.Trim());
                    txtTaxAmount.Focus();
                }
                else
                {
                    MessageBox.Show("Invalid Discount. Please Enter Valid Discount(Ex: 22%)", "Goods Received Note", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    txtSubDiscPer.Focus();
                }
            }
        }

        private void txtSubDiscount_KeyDown(object sender, KeyEventArgs e)
        {
            strDisc = string.Empty;
            if (e.KeyCode == Keys.Enter && txtSubDiscount.Text.Trim() != string.Empty)
            {
                if (clsValidation.isNumeric(txtSubDiscount.Text, System.Globalization.NumberStyles.Currency) == false)
                {
                    MessageBox.Show("Invalid Discount. Please Enter Valid Discount(Ex: 225.00)", "Goods Received Note", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    txtSubDiscount.Text = "0";
                    txtSubDiscount.Select(0, txtSubDiscount.Text.Trim().Length);
                }
                else
                {
                    CalculateSubTotalDiscountAmount(decimal.Parse(txtSubDiscount.Text.Trim()));
                    txtTaxAmount.Focus();
                }
            }
        }

        private void txtTaxAmount_KeyDown(object sender, KeyEventArgs e)
        {
            strDisc = string.Empty;
            if (e.KeyCode == Keys.Enter && txtTaxAmount.Text.Trim() != string.Empty)
            {
                if (clsValidation.isNumeric(txtTaxAmount.Text, System.Globalization.NumberStyles.Currency) == false)
                {
                    CalculateTax(txtTaxAmount.Text.Trim());
                    txtTaxAmount.Focus();
                }
                else
                {
                    MessageBox.Show("Invalid Tax Percentage. Please Enter Valid Tax Percentage(Ex: 22%)", "Goods Received Note", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            }
        }

        private void btnSave_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show("Are You Sure You want to Save This Document. ", "Supplier Return Note", MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.Yes)
            {

                objSupplierReturn.SqlStatement = "SELECT TransactionTemp_Details.* from TransactionTemp_Details WHERE TransactionTemp_Details.IId = 'SRN' AND TransactionTemp_Details.Doc_No = '" + lblTempDocNo.Text.ToString() + "' AND TransactionTemp_Details.Loca = " + LoginManager.LocaCode;
                objSupplierReturn.ReadTempTransDetails();
                if (objSupplierReturn.RecordFound != true)
                {
                    MessageBox.Show("Supplier Return Note Details Not Found.", "Supplier Return Note Apply", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                objSupplierReturn.Reference = txtReference.Text.Trim();
                objSupplierReturn.GrnNo = lblGrnNumber.Text.Trim();
                objSupplierReturn.GrnAmount = decimal.Parse(lblGRNAmount.Text.ToString());
                objSupplierReturn.Reference = txtReference.Text.Trim();
                objSupplierReturn.Remark = txtRemarks.Text.Trim();
                objSupplierReturn.GrossAmount = decimal.Parse(lblTotalAmount.Text.ToString());
                objSupplierReturn.Disc = txtSubDiscPer.Text.Trim();
                objSupplierReturn.Discount = decimal.Parse(txtSubDiscount.Text.ToString());
                objSupplierReturn.Tax = decimal.Parse(txtTaxAmount.Text.ToString());
                objSupplierReturn.SupplierReturnNoteSave();
                MessageBox.Show("Supplier Return Note Successfully Saved as Document No. " + objSupplierReturn.OrgDocNo, "Supplier Return Note Save", MessageBoxButtons.OK, MessageBoxIcon.Information);

                this.Close();
                this.Dispose();
                SupplierReturn = null;
            }
        }

        private void lblTempDocNo_Enter(object sender, EventArgs e)
        {
            if (search.Code != null && search.Code != "")
            {
                if (MessageBox.Show("Are You Sure You want to Load Saved GRN Document No :" + search.Code.Trim() + ". ", "Goods Received Note", MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.Yes)
                {

                    objSupplierReturn.RecallSaveDocNo = search.Code.Trim();
                    objSupplierReturn.SqlStatement = "SELECT Transaction_Save_Header.*, Supplier.Supp_Name FROM Transaction_Save_Header INNER JOIN Supplier ON Supplier.Supp_Code = Transaction_Save_Header.Supplier_Id WHERE iid = 'SRN' AND Doc_No = '" + search.Code.Trim() + "' AND Loca = ";
                    objSupplierReturn.ReadSavedDocument();
                    if (objSupplierReturn.RecordFound)
                    {
                        lblTempDocNo.Text = objSupplierReturn.TempDocNo;
                        lblGrnNumber.Text = objSupplierReturn.GrnNo.ToString();
                        lblGRNAmount.Text =(string)objSupplierReturn.GrnAmount.ToString();
                        txtSuppCode.Text = objSupplierReturn.SuppCode.ToString();
                        txtSuppName.Text = objSupplierReturn.SuppName.ToString();
                        txtReference.Text = objSupplierReturn.Reference.ToString();
                        txtRemarks.Text = objSupplierReturn.Remark.ToString();

                        objSupplierReturn.GetTempDataset();
                        dataGridTempGRN.DataSource = objSupplierReturn.TempGrn.Tables["GoodReceivedNote"];
                        dataGridTempGRN.Refresh();

                        objSupplierReturn.GetTotalValues();

                        lblTotalQty.Text = string.Format("{0:0.00}", objSupplierReturn.TotalQty);
                        lblTotalAmount.Text = string.Format("{0:0.00}", objSupplierReturn.TotalAmount);
                        txtSubDiscount.Text = "0";
                        txtSubDiscPer.Text = string.Empty;
                        txtTaxAmount.Text = "0";
                        lblSubTotal.Text = string.Format("{0:0.00}", objSupplierReturn.TotalAmount);
                        lblNetAmount.Text = string.Format("{0:0.00}", objSupplierReturn.TotalAmount);
                        txtSuppCode.Enabled = false;
                        txtSuppName.Enabled = false;
                        dtpDate.Enabled = false;
                        txtReference.Enabled = false;
                        txtRemarks.Enabled = false;
                        btnSaveDocSearch.Enabled = false;
                        btnGrnSearch.Enabled = false;
                        btnSupplierSearch.Enabled = false;
                    }
                }
                search.Code = string.Empty;
                search.Descript = string.Empty;
            }
        }

        private void btnApply_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show("Are You Sure You want to Apply This Document. ", "Supplier Return Note", MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.Yes)
            {
                DataSet dsDataForReport = new DataSet();
                frmReportViewer objRepViewer = new frmReportViewer();

                objSupplierReturn.SqlStatement = "SELECT TransactionTemp_Details.* from TransactionTemp_Details WHERE TransactionTemp_Details.IId = 'SRN' AND TransactionTemp_Details.Doc_No = '" + lblTempDocNo.Text.ToString() + "' AND TransactionTemp_Details.Loca = " + LoginManager.LocaCode;
                objSupplierReturn.ReadTempTransDetails();
                if (objSupplierReturn.RecordFound != true)
                {
                    MessageBox.Show("Supplier Return Note Details Not Found.", "Supplier Return Note Apply", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }

                objSupplierReturn.GrnNo = lblGrnNumber.Text.Trim();
                objSupplierReturn.GrossAmount = decimal.Parse(lblGRNAmount.Text.Trim());
                objSupplierReturn.Reference = txtReference.Text.Trim();
                objSupplierReturn.Remark = txtRemarks.Text.Trim();
                objSupplierReturn.GrossAmount = decimal.Parse(lblTotalAmount.Text.ToString());
                objSupplierReturn.Disc = txtSubDiscPer.Text.Trim();
                objSupplierReturn.Discount = decimal.Parse(txtSubDiscount.Text.ToString());
                objSupplierReturn.Tax = decimal.Parse(txtTaxAmount.Text.ToString());
                objSupplierReturn.SupplierReturnNoteApply();
                MessageBox.Show("Supplier Return Note Successfully Applied as Document No. " + objSupplierReturn.OrgDocNo, "Supplier Return Note Apply", MessageBoxButtons.OK, MessageBoxIcon.Information);

                objSupplierReturn.GetDataSetForReport();
                dsDataForReport = objSupplierReturn.GetReportDataset;
                rptSupplierReturnNote rptSrn = new rptSupplierReturnNote();
                rptSrn.SetDataSource(dsDataForReport);

                objRepViewer.crystalReportViewer1.ReportSource = rptSrn;
                objRepViewer.WindowState = FormWindowState.Maximized;
                objRepViewer.Show();

                this.Close();
                this.Dispose();
                SupplierReturn = null;
            }
        }

        private void dataGridTempGRN_RowPostPaint(object sender, DataGridViewRowPostPaintEventArgs e)
        {
            clsDGV dg = new clsDGV();
            dg.invoke(e);
        }
    }
}