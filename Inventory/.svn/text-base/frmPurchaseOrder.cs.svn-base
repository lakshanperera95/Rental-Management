using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using clsLibrary;

namespace Inventory
{
    public partial class frmPurchaseOrder : Form
    {

        private decimal decAmount;

        private string strDisc;

        private int intPosOfPerc;   // find Percentage mark on percentage
        private float fltDiscPer;
        private decimal decTaxAmount;

        clsPurchaseOrder objPon = new clsPurchaseOrder();

        public frmPurchaseOrder()
        {
            InitializeComponent();
        }

        private static frmPurchaseOrder Pon;

        private frmSearch search = new frmSearch();

        public static frmPurchaseOrder GetPon
        {
            get
            {
                return Pon;
            }
            set
            {
                Pon = value;
            }
        }

        private void frmPurchaseOrder_Load(object sender, EventArgs e)
        {
            objPon.SqlStatement = "SELECT Temp_Po FROM DocumentNoDetails WHERE Loca = ";
            objPon.GetTempDocumentNo();
            lblTempDocNo.Text = objPon.TempDocNo;
            dataGridTempPON.DataSource = objPon.TempPon;
            dataGridTempPON.Refresh();
        }

        private void btnClose_Click(object sender, EventArgs e)
        {
            this.Close();
            this.Dispose();
            Pon = null;
        }

        private void btnSupplierSearch_Click(object sender, EventArgs e)
        {
            if (search.IsDisposed)
            {
                search = new frmSearch();
            }

            if (txtSuppCode.Text.Trim() == string.Empty && txtSuppName.Text.Trim() == string.Empty)
            {
                objPon.SqlStatement = "SELECT Supp_Code AS [Supplier Code],Supp_Name AS [Supplier Name] FROM Supplier";
            }
            else
            {
                if (txtSuppCode.Text.Trim() != string.Empty && txtSuppName.Text.Trim() == string.Empty)
                {
                    objPon.SqlStatement = "SELECT Supp_Code AS [Supplier Code],Supp_Name AS [Supplier Name] FROM Supplier WHERE Supp_Code LIKE '%" + txtSuppCode.Text.Trim() + "%'";
                }
                else
                {
                    if (txtSuppCode.Text.Trim() == string.Empty && txtSuppName.Text.Trim() != string.Empty)
                    {
                        objPon.SqlStatement = "SELECT Supp_Code AS [Supplier Code],Supp_Name AS [Supplier Name] FROM Supplier WHERE Supp_Name LIKE '%" + txtSuppName.Text.Trim() + "%'";
                    }
                }
            }
            objPon.DataetName = "dsSupplier";
            objPon.GetSupplierDetails();
            search.dgSearch.DataSource = objPon.GetSupplierDataset.Tables["dsSupplier"];
            search.prop_Focus = txtSuppCode;
            search.Show();

        }

        private void txtSuppCode_Enter(object sender, EventArgs e)
        {
            if (search.Code != null && search.Code != "")
            {
                txtSuppCode.Text = search.Code.Trim();
                txtSuppName.Text = search.Descript.Trim();
            }
            search.Code = string.Empty;
            search.Descript = string.Empty;
        }

        private void txtSuppCode_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter && txtSuppCode.Text.Trim() != "")
            {
                objPon.SuppCode = txtSuppCode.Text.ToString().Trim();
                objPon.SqlStatement = "SELECT Supp_Code, Supp_Name FROM supplier WHERE Supp_Code = '" + txtSuppCode.Text.Trim() + "'";
                objPon.ReadSupplierDetails();
                if (objPon.RecordFound == true)
                {
                    txtSuppCode.Text = objPon.SuppCode;
                    txtSuppName.Text = objPon.SuppName;
                    if (MessageBox.Show("Do You wan't To Load Re-Order Level Products", "Purchase Order Note", MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.Yes)
                    {
                        objPon.SelectReOrderProductDetaile();
                        objPon.GetTempDataset();
                        dataGridTempPON.DataSource = objPon.TempPon.Tables["PurchaseOrder"];
                        dataGridTempPON.Refresh();
                        txtTaxAmount.Text = "0";
                        txtCreditPeriod.Text = "0";
                        objPon.GetTotalValues();

                        lblTotalQty.Text = string.Format("{0:0.00}", objPon.TotalQty);
                        lblTotalAmount.Text = string.Format("{0:0.00}", objPon.TotalAmount);
                        lblNetAmount.Text = string.Format("{0:0.00}", objPon.TotalAmount);
                        txtTaxAmount.Enabled = true;
                    }
                    txtSuppName.Focus();
                }
                else
                {
                    MessageBox.Show("Supplier Code Not Found.", "Purchase Order Note", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    txtSuppCode.Focus();
                }
            }
        }

        private void btnItemSearch_Click(object sender, EventArgs e)
        {
            if (search.IsDisposed)
            {
                search = new frmSearch();
            }

            if (txtProductCode.Text.Trim() != string.Empty && txtProductName.Text.Trim() == string.Empty)
            {
                objPon.SqlStatement = "SELECT Prod_Code AS [Product Code],Prod_Name AS [Product Name] FROM Product WHERE Supplier_Id = '" + txtSuppCode.Text.Trim() + "' AND Prod_Code LIKE '%" + txtProductCode.Text.Trim() + "%'";
            }
            else
            {
                if (txtProductCode.Text.Trim() == string.Empty && txtProductName.Text.Trim() != string.Empty)
                {
                    objPon.SqlStatement = "SELECT Prod_Code AS [Product Code],Prod_Name AS [Product Name] FROM Product WHERE Supplier_Id = '" + txtSuppCode.Text.Trim() + "' AND Prod_Name LIKE '%" + txtProductName.Text.Trim() + "%'";
                }
                else
                {
                    objPon.SqlStatement = "SELECT Prod_Code AS [Product Code],Prod_Name AS [Product Name] FROM Product WHERE Supplier_Id = '" + txtSuppCode.Text.Trim() + "'";
                }
            }

            objPon.DataetName = "dsProduct";
            objPon.GetItemDetails();

            search.dgSearch.DataSource = objPon.GetItemDataset.Tables["dsProduct"];
            search.prop_Focus = txtProductCode;
            search.Show();
        }

        private void txtProductCode_Enter(object sender, EventArgs e)
        {
            if (search.Code != null && search.Code != "")
            {
                txtProductCode.Text = search.Code.Trim();
                txtProductName.Text = search.Descript.Trim();
            }
            search.Code = string.Empty;
            search.Descript = string.Empty;
        }

        private void txtProductCode_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                objPon.SuppCode = txtSuppCode.Text.ToString().Trim();
                objPon.SqlStatement = "SELECT Supp_Code, Supp_Name FROM supplier WHERE Supp_Code = '" + txtSuppCode.Text.Trim() + "'";
                objPon.ReadSupplierDetails();
                if (objPon.RecordFound == true)
                {
                    txtSuppCode.Text = objPon.SuppCode;
                    txtSuppName.Text = objPon.SuppName;
                }
                else
                {
                    MessageBox.Show("Supplier Code Not Found.", "Purchase Order Note", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    txtSuppCode.Focus();
                }
                txtProductCode.Text = txtProductCode.Text.ToUpper();
                objPon.SqlStatement = "SELECT product.Prod_Code, product.Prod_Name, product.Purchase_price, product.Selling_Price, Stock_Master.Qty, product.Pack_Size, product.Unit FROM product INNER JOIN Stock_Master ON product.Prod_Code = Stock_Master.Prod_Code WHERE product.Supplier_Id = '" + txtSuppCode.Text.Trim() + "' AND product.Prod_Code = '" + txtProductCode.Text.Trim() + "' and Stock_Master.Loca = ";
                objPon.ReadProductDetails();
                if (objPon.RecordFound == true)
                {
                    txtProductName.Text = objPon.ProductName;
                    txtPurchasePrice.Text = (string)objPon.PurchasePrice.ToString();
                    lblCurrentQty.Text = (string)objPon.CurrentQty.ToString();

                    objPon.SqlStatement = "SELECT qty FROM TransactionTemp_Details WHERE Prod_Code = '" + objPon.ProductCode + "' AND Doc_No = '" + objPon.TempDocNo + "' AND IId = 'PON' AND Loca = ";
                    objPon.ReadExsistProductDetails();
                    txtQty.Text = (string)objPon.Qty.ToString();
                    txtQty.Select(0, txtQty.Text.Trim().Length);
                    txtQty.Focus();
                }
                else
                {
                    MessageBox.Show("Product Code Not Found. Please Check Product Code.", "Purchase Order Note", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            }
        }

        private void txtQty_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter && clsValidation.isNumeric(txtQty.Text, System.Globalization.NumberStyles.Float) == true && float.Parse(txtQty.Text) > 0)
            {
                strDisc = string.Empty;

                objPon.ProductCode = txtProductCode.Text.Trim().ToUpper();
                objPon.ProductName = txtProductName.Text.Trim().ToUpper();
                lblCurrentQty.Text = objPon.CurrentQty.ToString();
                objPon.Qty = float.Parse(txtQty.Text.ToString());
                decAmount = decimal.Parse(txtPurchasePrice.Text.ToString()) * decimal.Parse(txtQty.Text.ToString());
                lblAmount.Text = decAmount.ToString();
                objPon.Amount = decimal.Parse(lblAmount.Text.ToString());
                objPon.UpdatePonTempDataSet();
                objPon.GetTempDataset();
                dataGridTempPON.DataSource = objPon.TempPon.Tables["PurchaseOrder"];
                dataGridTempPON.Refresh();
                //Set Grid Last Record
                if (dataGridTempPON.RowCount > 12)
                {
                    dataGridTempPON.FirstDisplayedCell = dataGridTempPON[0, dataGridTempPON.RowCount - 6];
                }
                //******************
                txtProductCode.Text = string.Empty;
                txtProductName.Text = string.Empty;
                txtQty.Text = string.Empty;
                lblCurrentQty.Text = string.Empty;
                txtPurchasePrice.Text = string.Empty;
                txtQty.Text = "0";
                lblAmount.Text = string.Empty;
                btnSaveDocSearch.Enabled = false;
                btnSupplierSearch.Enabled = false;
                txtRemarks.Enabled = false;

                objPon.GetTotalValues();

                lblTotalQty.Text = string.Format("{0:0.00}", objPon.TotalQty);
                lblTotalAmount.Text = string.Format("{0:0.00}", objPon.TotalAmount);

                txtTaxAmount.Text ="0";
                lblNetAmount.Text = string.Format("{0:0.00}", objPon.TotalAmount);
                txtSuppCode.Enabled = false;
                txtSuppName.Enabled = false;
                cmbPayment.Enabled = false;
                dtpDate.Enabled = false;
                txtCreditPeriod.Enabled = false;
                txtRemarks.Enabled = false;

                txtTaxAmount.Enabled = true;
                txtContactPerson.Enabled = false;
                txtShiftToHeader.Enabled = false;
                txtShiftAddress1.Enabled = false;
                txtShiftAddress2.Enabled = false;

                txtProductCode.Focus();
            }
        }

        private void dataGridTempPON_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void btnApply_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show("Are You Sure You want to Apply This Document. ", "Goods Received Note", MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.Yes)
            {
                DataSet dsDataForReport = new DataSet();
                frmReportViewer objRepViewer = new frmReportViewer();

                objPon.SqlStatement = "SELECT TransactionTemp_Details.* from TransactionTemp_Details WHERE TransactionTemp_Details.IId = 'PON' AND TransactionTemp_Details.Doc_No = '" + lblTempDocNo.Text.ToString() + "' AND TransactionTemp_Details.Loca = " + LoginManager.LocaCode;
                objPon.ReadTempTransDetails();
                if (objPon.RecordFound != true)
                {
                    MessageBox.Show("Purchase Order Details Not Found.", "Purchase Order Note Apply", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }
                if (txtTaxAmount.Text.Trim() == string.Empty)
                {
                    txtTaxAmount.Text = "0";
                }

                if (txtCreditPeriod.Text.Trim() == string.Empty)
                {
                    txtCreditPeriod.Text = "0";
                }

                objPon.Pay_Type = cmbPayment.Text;
                objPon.Remark = txtRemarks.Text.Trim();
                objPon.GrossAmount = decimal.Parse(lblTotalAmount.Text.ToString());
                objPon.Tax = decimal.Parse(txtTaxAmount.Text.ToString());
                objPon.ExpectedDate = dtpDate.Value.ToString();
                objPon.CreditPeriod = int.Parse(txtCreditPeriod.Text.ToString());
                objPon.ContactPerson = txtContactPerson.Text.Trim();
                objPon.ShiftToHeader = txtShiftToHeader.Text.Trim();
                objPon.ShiftAddress1 = txtShiftAddress1.Text.Trim();
                objPon.ShiftAddress2 = txtShiftAddress2.Text.Trim();
                objPon.PurchaseOrderNoteApply();
                MessageBox.Show("Purchase Order Note Successfully Applied as Document No. " + objPon.OrgDocNo, "Purchase Order Note Apply", MessageBoxButtons.OK, MessageBoxIcon.Information);

                objPon.GetDataSetForReport();
                dsDataForReport = objPon.GetReportDataset;
                rptPurchaseOrder rptPon = new rptPurchaseOrder();
                rptPon.SetDataSource(dsDataForReport);

                objRepViewer.crystalReportViewer1.ReportSource = rptPon;
                objRepViewer.WindowState = FormWindowState.Maximized;
                objRepViewer.Show();

                this.Close();
                this.Dispose();
                Pon = null;
            }

        }

        private void btnSave_Click(object sender, EventArgs e)
        {
            if (MessageBox.Show("Are You Sure You want to Save This Document. ", "Purchase Order Note", MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.Yes)
            {
                objPon.SqlStatement = "SELECT TransactionTemp_Details.* from TransactionTemp_Details WHERE TransactionTemp_Details.IId = 'PON' AND TransactionTemp_Details.Doc_No = '" + lblTempDocNo.Text.ToString() + "' AND TransactionTemp_Details.Loca = " + LoginManager.LocaCode;
                objPon.ReadTempTransDetails();
                if (objPon.RecordFound != true)
                {
                    MessageBox.Show("Purchase Order Details Not Found.", "Purchase Order Note Apply", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    return;
                }
                objPon.Pay_Type = cmbPayment.Text;
                objPon.Remark = txtRemarks.Text.Trim();
                objPon.GrossAmount = decimal.Parse(lblTotalAmount.Text.ToString());
                objPon.Tax = decimal.Parse(txtTaxAmount.Text.ToString());
                objPon.ExpectedDate = dtpDate.Value.ToString();
                objPon.ContactPerson = txtContactPerson.Text.Trim();
                objPon.ShiftToHeader = txtShiftToHeader.Text.Trim();
                objPon.ShiftAddress1 = txtShiftAddress1.Text.Trim();
                objPon.ShiftAddress2 = txtShiftAddress2.Text.Trim();
                objPon.PurchaseOrderNoteSave();
                MessageBox.Show("Purchase Order Note Successfully Saved as Document No. " + objPon.OrgDocNo, "Purchase Order Note Save", MessageBoxButtons.OK, MessageBoxIcon.Information);

                this.Close();
                this.Dispose();
                Pon = null;
            }
        }

        private void btnSaveDocSearch_Click(object sender, EventArgs e)
        {
            if (search.IsDisposed)
            {
                search = new frmSearch();
            }

            objPon.SqlStatement = "SELECT Doc_No [Document No], Post_Date + '  ' + Supplier.Supp_Name [Supplier] FROM Transaction_Save_Header INNER JOIN supplier on Transaction_Save_Header.Supplier_Id = supplier.supp_code WHERE Iid = 'PON' AND Transaction_Save_Header.Loca = '" + LoginManager.LocaCode + "' ORDER BY RIGHT(Doc_No,6) DESC";
            objPon.DataetName = "Table";
            objPon.GetItemDetails();

            search.dgSearch.DataSource = objPon.GetItemDataset.Tables["Table"];
            search.Show();

            search.prop_Focus = lblTempDocNo;
        }

        private void btnSaveDocSearch_Enter(object sender, EventArgs e)
        {
            //if (search.Code != null && search.Code != "")
            //{
            //    if (MessageBox.Show("Are You Sure You want to Load Saved Purchase Order Document No :" + search.Code.Trim() + ". ", "Purchase Order Note", MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.Yes)
            //    {

            //        objPon.RecallSaveDocNo = search.Code.Trim();
            //        objPon.SqlStatement = "SELECT Transaction_Save_Header.*, Supplier.Supp_Name FROM Transaction_Save_Header INNER JOIN Supplier ON Supplier.Supp_Code = Transaction_Save_Header.Supplier_Id WHERE Doc_No = '" + search.Code.Trim() + "' AND Loca = ";
            //        objPon.ReadSavedDocument();
            //        if (objPon.RecordFound)
            //        {
            //            lblTempDocNo.Text = objPon.TempDocNo;
            //            txtSuppCode.Text = objPon.SuppCode.ToString();
            //            txtSuppName.Text = objPon.SuppName.ToString();
            //            cmbPayment.Text = objPon.Pay_Type;
            //            txtRemarks.Text = objPon.Remark.ToString();

            //            objPon.GetTempDataset();
            //            dataGridTempPON.DataSource = objPon.TempPon.Tables["PurchaseOrder"];
            //            dataGridTempPON.Refresh();

            //            objPon.GetTotalValues();

            //            lblTotalQty.Text = string.Format("{0:0.00}", objPon.TotalQty);
            //            lblTotalAmount.Text = string.Format("{0:0.00}", objPon.TotalAmount);
            //            txtTaxAmount.Text = "0";
            //            lblNetAmount.Text = string.Format("{0:0.00}", objPon.TotalAmount);
            //            txtSuppCode.Enabled = false;
            //            txtSuppName.Enabled = false;
            //            cmbPayment.Enabled = false;
            //            dtpDate.Enabled = false;
            //            txtCreditPeriod.Enabled = false;
            //            txtRemarks.Enabled = false;
            //            btnSaveDocSearch.Enabled = false;
            //        }
            //    }
            //    search.Code = string.Empty;
            //    search.Descript = string.Empty;
            //}
        }

        private void frmPurchaseOrder_FormClosed(object sender, FormClosedEventArgs e)
        {
            Pon = null;
        }

        private void frmPurchaseOrder_FormClosing(object sender, FormClosingEventArgs e)
        {
            // Hide the form...
            this.Hide();

            // Cancel the close...
            e.Cancel = true;
        }

        private void txtSuppName_KeyPress(object sender, KeyPressEventArgs e)
        {

        }

        private void txtCreditPeriod_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter && txtCreditPeriod.Text.Trim() != string.Empty)
            {
                cmbPayment.Focus();
            }
            else
            {
                if (e.KeyCode == Keys.Enter && txtCreditPeriod.Text.Trim() == string.Empty)
                {
                    txtCreditPeriod.Text = "0";
                    cmbPayment.Focus();
                }
            }
        }

        private void cmbPayment_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void cmbPayment_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter && cmbPayment.Text.Trim() != string.Empty)
            {
                txtRemarks.Focus();
            }
            else
            {
                if (e.KeyCode == Keys.Enter && cmbPayment.Text.Trim() == string.Empty)
                {
                    cmbPayment.Text = "CREDIT";
                    txtRemarks.Focus();
                }
            }
        }

        private void txtRemarks_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter && txtRemarks.Text.Trim() != string.Empty)
            {
                txtContactPerson.Focus();
            }
            else
            {
                if (e.KeyCode == Keys.Enter && txtRemarks.Text.Trim() == string.Empty)
                {
                    txtRemarks.Text = ".";
                    txtContactPerson.Focus();
                }
            }
        }

        private void txtContactPerson_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter && txtContactPerson.Text.Trim() != string.Empty)
            {
                txtShiftToHeader.Focus();
            }
            else
            {
                if (e.KeyCode == Keys.Enter && txtContactPerson.Text.Trim() == string.Empty)
                {
                    txtContactPerson.Text = ".";
                    txtShiftToHeader.Focus();
                }
            }
        }

        private void txtShiftAddress1_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter && txtShiftAddress1.Text.Trim() != string.Empty)
            {
                txtShiftAddress2.Focus();
            }
            else
            {
                if (e.KeyCode == Keys.Enter && txtShiftAddress1.Text.Trim() == string.Empty)
                {
                    txtShiftAddress1.Text = ".";
                    txtShiftAddress2.Focus();
                }
            }
        }

        private void txtShiftAddress2_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter && txtShiftAddress2.Text.Trim() != string.Empty)
            {
                txtProductCode.Focus();
            }
            else
            {
                if (e.KeyCode == Keys.Enter && txtShiftAddress2.Text.Trim() == string.Empty)
                {
                    txtShiftAddress2.Text = ".";
                    txtProductCode.Focus();
                }
            }
        }

        private void txtSuppName_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter && txtSuppName.Text.Trim() != string.Empty)
            {
                txtCreditPeriod.Focus();
            }
            else
            {
                if (e.KeyCode == Keys.Enter && txtSuppName.Text.Trim() == string.Empty)
                {
                    txtSuppName.Text = ".";
                    txtCreditPeriod.Focus();
                }
            }
        }

        private void txtProductName_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter && txtProductName.Text.Trim() != String.Empty)
            {
                txtQty.Focus();
            }
        }

        private void txtShiftToHeader_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter && txtShiftToHeader.Text.Trim() != string.Empty)
            {
                txtShiftAddress1.Focus();
            }
            else
            {
                if (e.KeyCode == Keys.Enter && txtShiftToHeader.Text.Trim() == string.Empty)
                {
                    txtShiftToHeader.Text = ".";
                    txtShiftAddress1.Focus();
                }
            }
        }

        private void CalculateTax(string strTaxText)
        {
            if (strTaxText.IndexOf("%") > 0 && strTaxText.IndexOf("%") < 3)
            {
                strDisc = strTaxText;
                intPosOfPerc = strTaxText.IndexOf("%");
                fltDiscPer = float.Parse(strTaxText.Substring(0, intPosOfPerc).ToString());

                //fltDiscPer = 100 + fltDiscPer;
                objPon.Amount = decimal.Parse(lblTotalAmount.Text.ToString());
                decAmount = decimal.Parse(lblTotalAmount.Text.ToString());
                decTaxAmount = (decimal.Parse(decAmount.ToString()) * decimal.Parse(fltDiscPer.ToString())) / 100;
                decAmount = decTaxAmount + decimal.Parse(lblTotalAmount.Text);
                txtTaxAmount.Text = string.Format("{0:0.00}", decTaxAmount);
                lblNetAmount.Text = string.Format("{0:0.00}", decAmount);
            }
            else
            {
                MessageBox.Show("Invalid Tax Percentage. Please Enter Valid Percentage(Ex: 22% )", "Goods Received Note", MessageBoxButtons.OK, MessageBoxIcon.Information);
                txtTaxAmount.Focus();
            }
        }

        private void txtTaxAmount_KeyDown(object sender, KeyEventArgs e)
        {
            strDisc = string.Empty;
            if (e.KeyCode == Keys.Enter && txtTaxAmount.Text.Trim() != string.Empty)
            {
                if (clsValidation.isNumeric(txtTaxAmount.Text, System.Globalization.NumberStyles.Currency) == false)
                {
                    CalculateTax(txtTaxAmount.Text.Trim());
                    txtTaxAmount.Focus();
                }
                else
                {
                    MessageBox.Show("Invalid Tax Percentage. Please Enter Valid Tax Percentage(Ex: 22%)", "Goods Received Note", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            }
        }

        private void dataGridTempPON_DoubleClick(object sender, EventArgs e)
        {
            if (dataGridTempPON.SelectedRows.Count <= 0 || dataGridTempPON.SelectedRows[0].Cells[0].ToString() == ""  )
            {
                MessageBox.Show("Select Data", "Select", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
            else
            {
                txtProductCode.Text = dataGridTempPON.SelectedRows[0].Cells[0].Value.ToString();
                txtProductName.Text = dataGridTempPON.SelectedRows[0].Cells[1].Value.ToString();
                objPon.SqlStatement = "SELECT product.Prod_Code, product.Prod_Name, product.Purchase_price, product.Selling_Price, Stock_Master.Qty, product.Pack_Size,product.Unit FROM product INNER JOIN Stock_Master ON product.Prod_Code = Stock_Master.Prod_Code WHERE product.Prod_Code = '" + txtProductCode.Text.Trim() + "' and Stock_Master.Loca = ";
                objPon.ReadProductDetails();
                txtPurchasePrice.Text = dataGridTempPON.SelectedRows[0].Cells[3].Value.ToString();
                txtQty.Text = dataGridTempPON.SelectedRows[0].Cells[4].Value.ToString();
                lblAmount.Text = dataGridTempPON.SelectedRows[0].Cells[5].Value.ToString();
                txtQty.Focus();
            }
        }

        private void dataGridTempPON_RowPostPaint(object sender, DataGridViewRowPostPaintEventArgs e)
        {
            clsDGV dg = new clsDGV();
            dg.invoke(e);
        }

        private void dataGridTempPON_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.F2 && dataGridTempPON.SelectedRows[0].Cells[0].Value.ToString() != string.Empty)
            {
                if (MessageBox.Show("Are You Sure You want to Delete This Item. ", "Purchase Order Note", MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.Yes)
                {
                    objPon.TempDocNo = lblTempDocNo.Text.Trim();
                    objPon.ProductCode = dataGridTempPON.SelectedRows[0].Cells[0].Value.ToString();
                    objPon.DeleteProductDetaile();
                    objPon.GetTempDataset();
                    dataGridTempPON.DataSource = objPon.TempPon.Tables["PurchaseOrder"];
                    dataGridTempPON.Refresh();

                    objPon.GetTotalValues();

                    lblTotalQty.Text = objPon.TotalQty.ToString();
                    lblTotalAmount.Text = objPon.TotalAmount.ToString();

                    txtProductCode.Focus();
                }
            }
        }

        private void btnPreview_Click(object sender, EventArgs e)
        {
            DataSet dsDataForReport = new DataSet();
            frmReportViewer objRepViewer = new frmReportViewer();

            objPon.SqlStatement = "SELECT TransactionTemp_Details.* from TransactionTemp_Details WHERE TransactionTemp_Details.IId = 'PON' AND TransactionTemp_Details.Doc_No = '" + lblTempDocNo.Text.ToString() + "' AND TransactionTemp_Details.Loca = " + LoginManager.LocaCode;
            objPon.ReadTempTransDetails();
            if (objPon.RecordFound != true)
            {
                MessageBox.Show("Purchase Order Details Not Found.", "Purchase Order Note Apply", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            objPon.Pay_Type = cmbPayment.Text;
            objPon.Remark = txtRemarks.Text.Trim();
            objPon.GrossAmount = decimal.Parse(lblTotalAmount.Text.ToString());
            objPon.Tax = decimal.Parse(txtTaxAmount.Text.ToString());
            objPon.ExpectedDate = dtpDate.Value.ToString();
            objPon.CreditPeriod = int.Parse(txtCreditPeriod.Text.ToString());
            objPon.ContactPerson = txtContactPerson.Text.Trim();
            objPon.ShiftToHeader = txtShiftToHeader.Text.Trim();
            objPon.ShiftAddress1 = txtShiftAddress1.Text.Trim();
            objPon.ShiftAddress2 = txtShiftAddress2.Text.Trim();

            objPon.GetDataSetForPreviewReport();

            dsDataForReport = objPon.GetReportDataset;
            rptPurchaseOrder rptPon = new rptPurchaseOrder();
            rptPon.SetDataSource(dsDataForReport);

            objRepViewer.crystalReportViewer1.ReportSource = rptPon;
            objRepViewer.WindowState = FormWindowState.Maximized;
            objRepViewer.Show();
        }

        private void lblTempDocNo_Click(object sender, EventArgs e)
        {

        }

        private void lblTempDocNo_Enter(object sender, EventArgs e)
        {

            if (search.Code != null && search.Code != "")
            {
                if (MessageBox.Show("Are You Sure You want to Load Saved Purchase Order Document No :" + search.Code.Trim() + ". ", "Purchase Order Note", MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.Yes)
                {
                    objPon.RecallSaveDocNo = search.Code.Trim();
                    objPon.SqlStatement = "SELECT Transaction_Save_Header.*, Supplier.Supp_Name FROM Transaction_Save_Header INNER JOIN Supplier ON Supplier.Supp_Code = Transaction_Save_Header.Supplier_Id WHERE iid = 'PON' AND Doc_No = '" + search.Code.Trim() + "' AND Loca = ";
                    objPon.ReadSavedDocument();
                    if (objPon.RecordFound)
                    {
                        lblTempDocNo.Text = objPon.TempDocNo;
                        txtSuppCode.Text = objPon.SuppCode.ToString();
                        txtSuppName.Text = objPon.SuppName.ToString();
                        cmbPayment.Text = objPon.Pay_Type;
                        txtRemarks.Text = objPon.Remark.ToString();
                        txtContactPerson.Text = objPon.ContactPerson.ToString();
                        txtShiftToHeader.Text = objPon.ShiftToHeader.ToString();
                        txtShiftAddress1.Text = objPon.ShiftAddress1.ToString();
                        txtShiftAddress2.Text = objPon.ShiftAddress2.ToString();
                        dtpExpectedOn.Value = DateTime.Parse(objPon.ExpectedDate.ToString());
                        objPon.GetTempDataset();
                        dataGridTempPON.DataSource = objPon.TempPon.Tables["PurchaseOrder"];
                        dataGridTempPON.Refresh();

                        objPon.GetTotalValues();

                        lblTotalQty.Text = string.Format("{0:0.00}", objPon.TotalQty);
                        lblTotalAmount.Text = string.Format("{0:0.00}", objPon.TotalAmount);
                        txtTaxAmount.Text = "0";
                        txtCreditPeriod.Text = "0";
                        lblTotalAmount.Text = string.Format("{0:0.00}", objPon.TotalAmount);
                        lblNetAmount.Text = string.Format("{0:0.00}", objPon.TotalAmount);
                        txtSuppCode.Enabled = false;
                        txtSuppName.Enabled = false;
                        txtContactPerson.Enabled = false;
                        txtShiftToHeader.Enabled = false;
                        txtShiftAddress1.Enabled = false;
                        txtShiftAddress2.Enabled = false;
                        cmbPayment.Enabled = false;
                        dtpDate.Enabled = false;
                        txtCreditPeriod.Enabled = false;
                        txtRemarks.Enabled = false;
                        btnSaveDocSearch.Enabled = false;
                        btnSupplierSearch.Enabled = false;
                    }
                }
                search.Code = string.Empty;
                search.Descript = string.Empty;
            }
        }


    }
    
}