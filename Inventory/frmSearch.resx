<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEACACoCAAAFgAAACgAAAAgAAAAQAAAAAEACAAAAAAAgAQAAAAAAAAAAAAAAAEAAAAA
        AAAAAAEA+LBgAPi4cAD4vHQA+MB4APjAgAD4sGgAeDgYAPjIkAD4uGgA/Ny4AKCYkAD86NQAvLSsAPz8
        +AD4yIgA/OTIAPzgwAD4xIQA+NCgAPjMmADMxLwA/PDgAP///wDY0MgA0MjAAPj4+ACooJgA7OjkAPj0
        9AD08OwAyIBIAJiQiAC4WBgA2NTMANiwkACYUCAAwLioALiwqADIwLQAwLiwAMS8sAD4sFgA/Pj4APjY
        rAD85MAA9PTwALSspADMyMAA6OTcAMjAuADQyLwAqFAgAODY0ADAuKwAsFggAPjQpAD42LAA+NioAPzk
        zACQSBgAkEAQAODg2ADIwLAAsKigANjEqAD86NAAuLCgAPjUqACYSBgAyJBoAPz8/ADw8PAA+NCYAPjo
        2ADYyLQA/PToAOjo4AD88OQA/Pz0APzgxADQwLAA/OzcAMzEuAD0uGwAkIiAAIiAeADAvLAAtKygALBQ
        EADguJgAeHBoAPjgwADU0MQA0Mi4AMTAuACgUBgA5OTgANTQzADk4NgAqFggAOjk2ADIaCAAwGgoALhY
        IADQkGgAuGAoANCAOAD44MgAsKiYAODIuADo0LAAeHBgAODc2AD0wIQA/NCYAGBYUADYuJAAgHBYAIB4
        cACgmIgA6MCYAPDYwACYiIAA6NjAAPDAgADoyKAA+MCIAPDIoADAkHAAkGhQANjY2AC0qJwAeEAgAPjc
        tADQcCgApKCUAMjEuACopJwA8OjoALh4UADAsKAAyHAoAKhIEACIQBgAzLCQAIBAGABoMBAAgDgQAPj4
        9ADUuJgA/PTsAMS8uAD8+PAA6MSYAOjczADEtKAA+PDkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAnp6enp6enp6enp6enp6enp6enp6enp6enp6eBwcknp6enp6enp6enp6enp6enp6enp6enp6e
        np6engeTBwcknp6enp6enp6enp6enp6enp6enp6enp6enp4HIz2SBwcknp6enp6enp6enp6enp6enp6e
        np6enp6eB5AhIz1gJAeenp6enp6enp6enp6enp6enp6enp6engc8RT0hI0WUH56enp6enp6enp6enp6e
        np6enp6enp4HPDRgNyEhIx+enp6enp6enp6enp6enp6enp6enp6ehTxkNGpnNDcfnp6enp6enp6enp6e
        np6enp6enp6ennZtjFlnjmRZh56enp6enp6enp6enp6enp6enp6enp6ej4GDaWZqaB+enp6enp6enp6e
        nkAbiAsge1YLDZ6enp6CN1oXaWgfnp6enp6enp6eng0vJjYnMxkZKUBVCw2eniAla3UiRp6enp6enp6e
        np4oNilLelwRCi0QDDUvVlt0JSVuZkaenp6enp6enp6emCdRbzoIBQQDBBIUCgxdIFt3np6enp6enp6e
        np6enhmJUYAPA1QCAgICAgMECBA1eHCenp6enp6enp6enp4wFTN5BQkGBgEGBgkCAgMEDxAYVQ2enp6e
        np6enp6enjAYQX0JBgEBAQEBAQYJAgMECAwNC56enp6enp6enp5iIhhaBRIPBQMCBgEqAQEJAgMECjUg
        DZ6enp6enp6enj4+Xn4sLBMUDwUDCQEqAQEJAgMUSi8Lnp6enp6enp6eYTE/bC05OBQIEgUDAgEqAQYC
        AxIQMguenp6enp6enp4cZSUWEAo6EwgPBQQDAwYqAQkCBC1dC56enp6enp6enkgxQ5lCEQosExQPBQQE
        AwEBBgIDERgLnp6enp6enp6eGhwmHhY7UBEKOhMIBQQEAwEGAgQRGQuenp6enp6enp4uHg1jT0oMDAw7
        hhQPEgUFAgYJBVwyG56enp6enp6enhwOJxUXThYWK1IKOBQIDxIECVQIfDYbnp6enp6enp6enhpNQx0O
        TCtMDBE5E0kICBICAxNeJg2enp6enp6enp6eHQ4zFRcrlxYMEAosOBNJCAN/QSkvnp6enp6enp6enp6e
        Gi6EIhcOTlI7UAo5RERzcpY/KBWenp6enp6enp6enp4dRx5XMh0XDhZCEBEtCpqRPyconp6enp6enp6e
        np6enp4ORy5TWF9xHk+dm0ucjVMVV56enp6enp6enp6enp6enp6VKw5NKVgbG4omKBkYFV+enp6enp6e
        np6enp6enp6enp6eHRoOHhwxZTFjIjAwnp6enp6enp6enp6enp6enp6enp6enosuGkgcYT5inp6enp6e
        np6enp6enp6env///+P////B////gP///wD///4A///8Af//+AP///AH///wD/4A8B/4ADA/8AAAf+AA
        B//AAAf/gAAD/4AAA/8AAAH/AAAB/wAAAf8AAAH/AAAB/wAAAf8AAAH/AAAB/4AAAf+AAAP/wAAD/8AA
        B//gAA//8AAf//wAP///AP//
</value>
  </data>
</root>